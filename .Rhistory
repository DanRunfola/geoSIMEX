paramCol <- function(i, aidData=aidData, roiData=roiData, probAidAssume=probAidAssume, aid.precision.code=aid.precision.code, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name){
# Getting information about aid project
aidDataPrj_Temp <- aidData[i,]
PC_temp <- aid.precision.code[i]
# Getting information about subcounty & region that the aid project falls in
subcounty_temp <- roiData[roiData[,roi.pc1.name] == aidDataPrj_Temp[,aid.pc1.centroid.name],]
# Making temporary dataset that will merge into
paramCol <- roiData
paramCol$prj <- 0
if(PC_temp == 1){
paramCol$prj[paramCol[,roi.pc1.name] %in% subcounty_temp[,roi.pc1.name]] <- 1
paramCol$prj <- paramCol$prj * probAidAssume
paramCol$prj <- paramCol$prj / sum(paramCol$prj)
}
if(PC_temp == 2){
paramCol$prj[paramCol[,roi.pc2.name] %in% subcounty_temp[,roi.pc2.name]] <- 1
paramCol$prj <- paramCol$prj * probAidAssume
paramCol$prj <- paramCol$prj / sum(paramCol$prj)
}
if(PC_temp == 3){
paramCol$prj[paramCol[,roi.pc3.name] %in% subcounty_temp[,roi.pc3.name]] <- 1
paramCol$prj <- paramCol$prj * probAidAssume
paramCol$prj <- paramCol$prj / sum(paramCol$prj)
}
if(PC_temp == 4){
paramCol$prj[paramCol[,roi.pc4.name] %in% subcounty_temp[,roi.pc4.name]] <- 1
paramCol$prj <- paramCol$prj * probAidAssume
paramCol$prj <- paramCol$prj / sum(paramCol$prj)
}
if((PC_temp == 6) | (PC_temp == 8)){
paramCol$prj[paramCol[,roi.pc6.name] %in% subcounty_temp[,roi.pc6.name]] <- 1
paramCol$prj <- paramCol$prj * probAidAssume
paramCol$prj <- paramCol$prj / sum(paramCol$prj)
}
#row.names(paramCol) <- paramCol[,roi.pc1.name]
row.names(paramCol) <- paste(1:length(paramCol[,roi.pc1.name]), paramCol[,roi.pc1.name])
paramCol_return <- as.data.frame(paramCol$prj)
row.names(paramCol_return) <- row.names(paramCol)
names(paramCol_return) <- paste("prj",i,sep="")
return(paramCol_return)
}
paramSet <- function(aidData=aidData, roiData=roiData, probAidAssume=probAidAssume, aid.precision.code=aid.precision.code, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name= roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name){
param_set = as.data.frame(lapply(1:nrow(aidData), paramCol, aidData=aidData, roiData=roiData, probAidAssume=probAidAssume, aid.precision.code=aid.precision.code, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name))
#param_set.a = lapply(1:nrow(aidData), paramCol, aidData=aidData, roiData=roiData, probAidAssume=probAidAssume, aid.precision.code=aid.precision.code, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name)
return(param_set)
}
dollar_expected_value <- function(param_set, aid.project.amount){
aid.project.amount[is.na(aid.project.amount)] <- 0
paramDollars <- lapply(1:length(aid.project.amount), function(i) param_set[,i] * aid.project.amount[i])
paramDollars <- as.data.frame(paramDollars)
dollars_expected <- rowSums(paramDollars)
return(dollars_expected)
}
prob_aid <- function(param_set){
param_set_probNoAid <- 1 - param_set
prob.0.prjs <- apply(param_set_probNoAid, 1, function(x) prod(x))
prob.atLeast1.prjs <- 1 - prob.0.prjs
#prob.atLeast1.prjs[prob.atLeast1.prjs < 0.5] <- 0
#prob.atLeast1.prjs[prob.atLeast1.prjs >= 0.5] <- 1
return(prob.atLeast1.prjs)
}
geoSimulateError <- function(probIncPC, aidData=aidData, roiData=roiData, probAidAssume=probAid, PC_researcherSees=precision.code.original, maxLambda_denom=maxLambda_denom, roi.area=roi.area, aid.precision.code=aid.precision.code, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name, aid.project.amount=aid.project.amount, model=model, geoSIMEXvariable=geoSIMEXvariable, binary=binary, sim_pc1=sim_pc1){
# Initializing Results Matrix
results <- matrix(NA, ncol=2,nrow=1)
results <- as.data.frame(results)
names(results) <- c("lambda","aid.expected.coef")
# Simulating Error
aid.precision.code <- PC_researcherSees
probStayPC <- 1 - probIncPC
### Equal chance of increasing precision codes
uncertainty.level <- sample(1,x=c(0,1,2,3,4),prob=c(0.20,0.20,0.20,0.20,0.20))
if(uncertainty.level == 0){
# ... Precision Code 4s
aid.precision.code[aid.precision.code==4] <- sample(size=length(aid.precision.code[aid.precision.code==4]),
x=c(4,6),
prob=c(probStayPC,probIncPC),
replace=TRUE)
# ... Precision Code 3s
aid.precision.code[aid.precision.code==3] <- sample(size=length(aid.precision.code[aid.precision.code==3]),
x=c(3,4,6),
prob=c(probStayPC,probIncPC/2,probIncPC/2),
replace=TRUE)
# ... Precision Code 2s
aid.precision.code[aid.precision.code==2] <- sample(size=length(aid.precision.code[aid.precision.code==2]),
x=c(2,3,4,6),
prob=c(probStayPC,probIncPC/3,probIncPC/3,probIncPC/3),
replace=TRUE)
# ... Precision Code 1s
if(sim_pc1){
aid.precision.code[aid.precision.code==1] <- sample(size=length(aid.precision.code[aid.precision.code==1]),
x=c(1,2,3,4,6),
prob=c(probStayPC,probIncPC/4,probIncPC/4,probIncPC/4,probIncPC/4),
replace=TRUE)
}
}
if(uncertainty.level == 1){
# ... Precision Code 4s
aid.precision.code[aid.precision.code==4] <- sample(size=length(aid.precision.code[aid.precision.code==4]),
x=c(4,6),
prob=c(probStayPC,probIncPC),
replace=TRUE)
# ... Precision Code 3s
aid.precision.code[aid.precision.code==3] <- sample(size=length(aid.precision.code[aid.precision.code==3]),
x=c(3,4,6),
prob=c(probStayPC,probIncPC/3,probIncPC/2),
replace=TRUE)
# ... Precision Code 2s
aid.precision.code[aid.precision.code==2] <- sample(size=length(aid.precision.code[aid.precision.code==2]),
x=c(2,3,4,6),
prob=c(probStayPC,probIncPC/5,probIncPC/4,probIncPC/3),
replace=TRUE)
# ... Precision Code 1s
if(sim_pc1){
aid.precision.code[aid.precision.code==1] <- sample(size=length(aid.precision.code[aid.precision.code==1]),
x=c(1,2,3,4,6),
prob=c(probStayPC,probIncPC/7,probIncPC/6,probIncPC/5,probIncPC/4),
replace=TRUE)
}
}
if(uncertainty.level == 2){
# ... Precision Code 4s
aid.precision.code[aid.precision.code==4] <- sample(size=length(aid.precision.code[aid.precision.code==4]),
x=c(4,6),
prob=c(probStayPC/3,probIncPC),
replace=TRUE)
# ... Precision Code 3s
aid.precision.code[aid.precision.code==3] <- sample(size=length(aid.precision.code[aid.precision.code==3]),
x=c(3,4,6),
prob=c(probStayPC/3,probIncPC/2,probIncPC/1),
replace=TRUE)
# ... Precision Code 2s
aid.precision.code[aid.precision.code==2] <- sample(size=length(aid.precision.code[aid.precision.code==2]),
x=c(2,3,4,6),
prob=c(probStayPC/3,probIncPC/5,probIncPC/2,probIncPC/1),
replace=TRUE)
# ... Precision Code 1s
if(sim_pc1){
aid.precision.code[aid.precision.code==1] <- sample(size=length(aid.precision.code[aid.precision.code==1]),
x=c(1,2,3,4,6),
prob=c(probStayPC/3,probIncPC/7,probIncPC/6,probIncPC/2,probIncPC/1),
replace=TRUE)
}
}
if(uncertainty.level == 3){
# ... Precision Code 4s
aid.precision.code[aid.precision.code==4] <- sample(size=length(aid.precision.code[aid.precision.code==4]),
x=c(4,6),
prob=c(probStayPC/15,probIncPC),
replace=TRUE)
# ... Precision Code 3s
aid.precision.code[aid.precision.code==3] <- sample(size=length(aid.precision.code[aid.precision.code==3]),
x=c(3,4,6),
prob=c(probStayPC/15,probIncPC/3,probIncPC/1),
replace=TRUE)
# ... Precision Code 2s
aid.precision.code[aid.precision.code==2] <- sample(size=length(aid.precision.code[aid.precision.code==2]),
x=c(2,3,4,6),
prob=c(probStayPC/15,probIncPC/11,probIncPC/3,probIncPC/1),
replace=TRUE)
# ... Precision Code 1s
if(sim_pc1){
aid.precision.code[aid.precision.code==1] <- sample(size=length(aid.precision.code[aid.precision.code==1]),
x=c(1,2,3,4,6),
prob=c(probStayPC/15,probIncPC/11,probIncPC/10,probIncPC/3,probIncPC/1),
replace=TRUE)
}
}
if(uncertainty.level == 4){
# ... Precision Code 4s
aid.precision.code[aid.precision.code==4] <- sample(size=length(aid.precision.code[aid.precision.code==4]),
x=c(4,6),
prob=c(probStayPC/50,probIncPC),
replace=TRUE)
# ... Precision Code 3s
aid.precision.code[aid.precision.code==3] <- sample(size=length(aid.precision.code[aid.precision.code==3]),
x=c(3,4,6),
prob=c(probStayPC/50,probIncPC/5,probIncPC/1),
replace=TRUE)
# ... Precision Code 2s
aid.precision.code[aid.precision.code==2] <- sample(size=length(aid.precision.code[aid.precision.code==2]),
x=c(2,3,4,6),
prob=c(probStayPC/50,probIncPC/20,probIncPC/5,probIncPC/1),
replace=TRUE)
# ... Precision Code 1s
if(sim_pc1){
aid.precision.code[aid.precision.code==1] <- sample(size=length(aid.precision.code[aid.precision.code==1]),
x=c(1,2,3,4,6),
prob=c(probStayPC/50,probIncPC/25,probIncPC/20,probIncPC/5,probIncPC/1),
replace=TRUE)
}
}
# Calculating paramSet
param_set = paramSet(aidData=aidData, roiData=roiData, probAidAssume=probAidAssume, aid.precision.code=aid.precision.code, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name)
# Update aid variable
if(binary){
roiData[geoSIMEXvariable] <- prob_aid(param_set=param_set)
} else{
roiData[geoSIMEXvariable] <- dollar_expected_value(param_set=param_set, aid.project.amount=as.matrix(aidData[aid.project.amount]))
}
# Update Model
df.temp <- model$model
df.temp[geoSIMEXvariable] <- roiData[geoSIMEXvariable]
# Update Model
model.SIMEX <- update(model, data = df.temp)
# Calculate Lambda
lambda <- calcLambda(param_set, maxLambda_denom, as.matrix(roiData[roi.area]))
# Collecting Results
# Coefficients
model.SIMEX.coefs <- as.data.frame(as.list(model.SIMEX$coefficients))
names(model.SIMEX.coefs) <- names(model.SIMEX$coefficients)
model.SIMEX.coefs$lambda <- lambda
# Standard Error
model.SIMEX.se <- as.data.frame(t(summary(model.SIMEX)$coefficients[,2]))
names(model.SIMEX.se) <- names(model.SIMEX$coefficients)
model.SIMEX.se$lambda <- lambda
return(list(model.SIMEX.coefs=model.SIMEX.coefs,
model.SIMEX.se=model.SIMEX.se))
}
geoSimulateError2 <- function(iter, aidData_1, aidData_2, roiData, probAidAssume_1, probAidAssume_2, PC_researcherSees_1, PC_researcherSees_2, maxLambda_denom_1, maxLambda_denom_2, roi.area_1, roi.area_2, aid.precision.code_1, aid.precision.code_2, roi.pc1.name, roi.pc2.name, roi.pc3.name, roi.pc4.name, roi.pc5.name, roi.pc6.name, aid.pc1.centroid.name_1, aid.pc1.centroid.name_2, aid.amount_1, aid.amount_2, model, geoSIMEXvariable_1, geoSIMEXvariable_2, binary, diagonal, sim_pc1){
if(diagonal){
probIncPC_1 <- runif(1)
probIncPC_2 <- probIncPC_1
} else {
probIncPC_1 <- runif(1)
probIncPC_2 <- runif(1)
}
# to make sure not don't get too correlated
if(probIncPC_1 > .85){
probIncPC_2 <- 1 - probIncPC_2
}
# Simulating Error
aidData_1[aid.precision.code_1] <- PC_researcherSees_1
aidData_2[aid.precision.code_2] <- PC_researcherSees_2
probStayPC_1 <- 1 - probIncPC_1
probStayPC_2 <- 1 - probIncPC_2
# Randomly Increase Precision Codes
# ... Precision Code 4s
aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 4] <- sample(size=length(aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 4]),
x=c(4,6),
prob=c(probStayPC_1,probIncPC_1),
replace=TRUE)
aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 4] <- sample(size=length(aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 4]),
x=c(4,6),
prob=c(probStayPC_2,probIncPC_2),
replace=TRUE)
# ... Precision Code 3s
aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 3] <- sample(size=length(aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 3]),
x=c(3,4,6),
prob=c(probStayPC_1,probIncPC_1/2,probIncPC_1/2),
replace=TRUE)
aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 3] <- sample(size=length(aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 3]),
x=c(3,4,6),
prob=c(probStayPC_2,probIncPC_2/2,probIncPC_2/2),
replace=TRUE)
# ... Precision Code 2s
aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 2] <- sample(size=length(aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 2]),
x=c(2,3,4,6),
prob=c(probStayPC_1,probIncPC_1/3,probIncPC_1/3,probIncPC_1/3),
replace=TRUE)
aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 2] <- sample(size=length(aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 2]),
x=c(2,3,4,6),
prob=c(probStayPC_2,probIncPC_2/3,probIncPC_2/3,probIncPC_2/3),
replace=TRUE)
# ... Precision Code 1s
if(sim_pc1){
aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 1] <- sample(size=length(aidData_1[aid.precision.code_1][aidData_1[aid.precision.code_1] == 1]),
x=c(1,2,3,4,6),
prob=c(probStayPC_1,probIncPC_1/4,probIncPC_1/4,probIncPC_1/4,probIncPC_1/4),
replace=TRUE)
aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 1] <- sample(size=length(aidData_2[aid.precision.code_2][aidData_2[aid.precision.code_2] == 1]),
x=c(1,2,3,4,6),
prob=c(probStayPC_2,probIncPC_2/4,probIncPC_2/4,probIncPC_2/4,probIncPC_2/4),
replace=TRUE)
}
# Calculating paramSet
param_set_1 = paramSet(aidData=aidData_1, roiData=roiData, probAidAssume=probAidAssume_1, aid.precision.code=aid.precision.code_1, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name_1)
param_set_2 = paramSet(aidData=aidData_2, roiData=roiData, probAidAssume=probAidAssume_2, aid.precision.code=aid.precision.code_2, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name_2)
# Update aid variable
if(binary){
roiData[geoSIMEXvariable_1] <- prob_aid(param_set=param_set_1)
roiData[geoSIMEXvariable_2] <- prob_aid(param_set=param_set_2)
} else{
roiData[geoSIMEXvariable_1] <- dollar_expected_value(param_set=param_set_1, dollar_set=as.matrix(aidData_1[aid.amount_1]))
roiData[geoSIMEXvariable_2] <- dollar_expected_value(param_set=param_set_2, dollar_set=as.matrix(aidData_2[aid.amount_2]))
}
# Update Model
df.temp <- model$model
df.temp[geoSIMEXvariable_1] <- roiData[geoSIMEXvariable_1]
df.temp[geoSIMEXvariable_2] <- roiData[geoSIMEXvariable_2]
# Update Model
model.SIMEX <- update(model, data = df.temp)
# Calculate Lambda
lambda_1 <- calcLambda(param_set_1, maxLambda_denom_1, as.matrix(roiData[roi.area_1]))
lambda_2 <- calcLambda(param_set_2, maxLambda_denom_2, as.matrix(roiData[roi.area_2]))
# Collecting Results
# Coefficients
model.SIMEX.coefs <- as.data.frame(as.list(model.SIMEX$coefficients))
names(model.SIMEX.coefs) <- names(model.SIMEX$coefficients)
model.SIMEX.coefs$lambda_1 <- lambda_1
model.SIMEX.coefs$lambda_2 <- lambda_2
# Standard Error
model.SIMEX.se <- as.data.frame(t(summary(model.SIMEX)$coefficients[,2]))
names(model.SIMEX.se) <- names(model.SIMEX$coefficients)
model.SIMEX.se$lambda_1 <- lambda_1
model.SIMEX.se$lambda_2 <- lambda_2
return(list(model.SIMEX.coefs=model.SIMEX.coefs,
model.SIMEX.se=model.SIMEX.se))
}
bootIter <- function(i, geoSimulateError.results.df, geoSimulateError.results.df.se, bins, number.from.bin, extrapolation, number.from.bin.average){
geoSimulateError.results.df$rand <- runif(nrow(geoSimulateError.results.df))
geoSimulateError.results.df.se$rand <- geoSimulateError.results.df$rand
geoSimulateError.results.df <- geoSimulateError.results.df[order(geoSimulateError.results.df$rand),]
geoSimulateError.results.df.se <- geoSimulateError.results.df.se[order(geoSimulateError.results.df.se$rand),]
results.boot <- matrix(NA,nrow=0,ncol=ncol(geoSimulateError.results.df))
results.boot <- as.data.frame(results.boot)
results.boot.se <- matrix(NA,nrow=0,ncol=ncol(geoSimulateError.results.df.se))
results.boot.se <- as.data.frame(results.boot.se)
boot.coefs <- as.data.frame(matrix(NA, nrow=1, ncol=ncol(geoSimulateError.results.df)-3))
names(boot.coefs) <- head(names(geoSimulateError.results.df), -3)
boot.se <- as.data.frame(matrix(NA, nrow=1, ncol=ncol(geoSimulateError.results.df.se)-3))
names(boot.se) <- head(names(geoSimulateError.results.df.se), -3)
# Randomly Pulling from Results Matrix to Get Subsample for Bootstrapping
minLambda <- min(geoSimulateError.results.df$lambda)
maxLambda <- max(geoSimulateError.results.df$lambda)
binSize <- (maxLambda - minLambda) / bins
binSize_lb <- minLambda
binSize_ub <- minLambda + binSize
numIter <- bins
#numIter <- (maxLambda - minLambda) / binSize
#for(i in 1:ceiling(numIter)){
for(i in 1:numIter){
results.boot <- rbind(results.boot, geoSimulateError.results.df[(geoSimulateError.results.df$lambda >= binSize_lb) & (geoSimulateError.results.df$lambda <= binSize_ub),][1:number.from.bin,])
results.boot.se <- rbind(results.boot.se, geoSimulateError.results.df.se[(geoSimulateError.results.df.se$lambda >= binSize_lb) & (geoSimulateError.results.df.se$lambda <= binSize_ub),][1:number.from.bin,])
binSize_lb <- binSize_lb + binSize
binSize_ub <- binSize_ub + binSize
if(i == (numIter - 1)){
binSize_ub <-  binSize_ub + 1
}
}
# Summarizing by Bins
results.boot$bin <- rep(1:bins,each=number.from.bin)
results.boot.se$bin <- rep(1:bins,each=number.from.bin)
# Removing NAs
results.boot <- results.boot[!is.na(results.boot$rand),]
results.boot.se <- results.boot.se[!is.na(results.boot.se$rand),]
# Take Means
if(number.from.bin.average){
results.boot <- aggregate(. ~ bin, results.boot, mean)
results.boot.se <- aggregate(. ~ bin, results.boot.se, mean)
}
results.boot <- subset(results.boot, select = -c(bin))
results.boot.se <- subset(results.boot.se, select = -c(bin))
# Extrapolating
numVars <- ncol(results.boot) - 3
coefs.geoSIMEX.boot <- matrix(NA, nrow=1, ncol=numVars)
for(i in 1:numVars){
if(extrapolation=="linear"){
coefs.geoSIMEX.boot[i] <- summary(lm(as.matrix(results.boot[i]) ~ lambda, data = results.boot))$coefficients[1]
}
if(extrapolation=="quadratic"){
coefs.geoSIMEX.boot[i] <- summary(lm(as.matrix(results.boot[i]) ~ lambda + lambda_sq, data = results.boot))$coefficients[1]
}
}
coefs.geoSIMEX.boot <- as.data.frame(coefs.geoSIMEX.boot)
names(coefs.geoSIMEX.boot) <- head(names(results.boot), -3)
numVars <- ncol(results.boot.se) - 3
se.geoSIMEX.boot <- matrix(NA, nrow=1, ncol=numVars)
for(i in 1:numVars){
if(extrapolation=="linear"){
se.geoSIMEX.boot[i] <- summary(lm(as.matrix(results.boot.se[i]) ~ lambda, data = results.boot.se))$coefficients[1]
}
if(extrapolation=="quadratic"){
se.geoSIMEX.boot[i] <- summary(lm(as.matrix(results.boot.se[i]) ~ lambda + lambda_sq, data = results.boot.se))$coefficients[1]
}
}
se.geoSIMEX.boot <- as.data.frame(se.geoSIMEX.boot)
names(se.geoSIMEX.boot) <- head(names(results.boot.se), -3)
return(list(coefs.geoSIMEX.boot=coefs.geoSIMEX.boot,
se.geoSIMEX.boot=se.geoSIMEX.boot))
}
# Model Averaging Change Probability
model_rand_prob <- function(j, param_set.bin=param_set.bin, aidData=aidData, roiData=roiData, aid.project.amount=aid.project.amount, model=model, geoSIMEXvariable=geoSIMEXvariable, binary=binary){
# Update aid variable
if(binary){
# WILL NEED THE RANDOMLY GENERATING PARAM SET HERE!
} else{
roiData[geoSIMEXvariable] <- dollar_expected_value_randProb(param_set.bin=param_set.bin, aid.project.amount=as.matrix(aidData[aid.project.amount]))
}
# Update Model
df.temp <- model$model
df.temp[geoSIMEXvariable] <- roiData[geoSIMEXvariable]
# Update Model
model.SIMEX <- update(model, data = df.temp)
#### Collecting Results
# Coefficients
model.SIMEX.coefs <- as.data.frame(as.list(model.SIMEX$coefficients))
names(model.SIMEX.coefs) <- names(model.SIMEX$coefficients)
# Standard Error
model.SIMEX.se <- as.data.frame(t(summary(model.SIMEX)$coefficients[,2]))
names(model.SIMEX.se) <- names(model.SIMEX$coefficients)
# can also return AIC here...
return(list(model.SIMEX.coefs=model.SIMEX.coefs,
model.SIMEX.se=model.SIMEX.se))
}
model_rand_prob2 <- function(j,
param_set.bin_1=param_set.bin_1,
param_set.bin_2=param_set.bin_2,
aidData_1=aidData_1,
aidData_2=aidData_2,
roiData=roiData,
aid.amount_1=aid.amount_1,
aid.amount_2=aid.amount_2,
model=model,
geoSIMEXvariable_1=geoSIMEXvariable_1,
geoSIMEXvariable_2=geoSIMEXvariable_2,
binary=binary){
# Update aid variable
if(binary){
# WILL NEED THE RANDOMLY GENERATING PARAM SET HERE!
} else{
roiData[geoSIMEXvariable_1] <- dollar_expected_value_randProb(param_set.bin=param_set.bin_1, dollar_set=as.matrix(aidData_1[aid.amount_1]))
roiData[geoSIMEXvariable_2] <- dollar_expected_value_randProb(param_set.bin=param_set.bin_2, dollar_set=as.matrix(aidData_2[aid.amount_2]))
}
#cor.vars <- cor(roiData[geoSIMEXvariable_1],roiData[geoSIMEXvariable_2])
#while(cor.vars > 0.7){
#
#}
# Update Model
df.temp <- model$model
df.temp[geoSIMEXvariable_1] <- roiData[geoSIMEXvariable_1]
df.temp[geoSIMEXvariable_2] <- roiData[geoSIMEXvariable_2]
# Update Model
model.SIMEX <- update(model, data = df.temp)
#### Collecting Results
# Coefficients
model.SIMEX.coefs <- as.data.frame(as.list(model.SIMEX$coefficients))
names(model.SIMEX.coefs) <- names(model.SIMEX$coefficients)
# Standard Error
model.SIMEX.se <- as.data.frame(t(summary(model.SIMEX)$coefficients[,2]))
names(model.SIMEX.se) <- names(model.SIMEX$coefficients)
# can also return AIC here...
return(list(model.SIMEX.coefs=model.SIMEX.coefs,
model.SIMEX.se=model.SIMEX.se))
}
dollar_expected_value_randProb <- function(j, param_set.bin, aid.project.amount){
dist.type <- sample(1,x=c(1,2),prob=c(1,1))
if(dist.type==1){
probAidGuess.current <- runif(nrow(param_set.bin))
}
if(dist.type==2){
probAidGuess.current <- rgamma(nrow(param_set.bin), shape=runif(1,1,20))
}
param_set.bin <- param_set.bin*probAidGuess.current
param_set.bin.colsums <- colSums(param_set.bin)
paramDollars <- lapply(1:length(aid.project.amount), function(i) param_set.bin[,i] / param_set.bin.colsums[i])
paramDollars <- as.data.frame(paramDollars)
paramDollars <- lapply(1:length(aid.project.amount), function(i) paramDollars[,i] * aid.project.amount[i])
paramDollars <- as.data.frame(paramDollars)
return(rowSums(paramDollars))
}
geoSimulate_realization <- function(j, param_set=param_set, roiData=roiData, aid.project.amount=aid.project.amount, model=model, geoSIMEXvariable=geoSIMEXvariable, binary=binary, aidData=aidData){
# Update aid variable
if(binary){
temp.var <- realization_of_aid(param_set=param_set, aid.project.amount=as.matrix(aidData[aid.project.amount]))
temp.var[temp.var > 0] <- 1
roiData[geoSIMEXvariable] <- temp.var
} else{
roiData[geoSIMEXvariable] <- realization_of_aid(param_set=param_set, aid.project.amount=as.matrix(aidData[aid.project.amount]))
}
# Update Model
df.temp <- model$model
df.temp[geoSIMEXvariable] <- roiData[geoSIMEXvariable]
# Update Model
model.SIMEX <- update(model, data = df.temp)
# Collecting Results
# Coefficients
model.SIMEX.coefs <- as.data.frame(as.list(model.SIMEX$coefficients))
names(model.SIMEX.coefs) <- names(model.SIMEX$coefficients)
# Standard Error
model.SIMEX.se <- as.data.frame(t(summary(model.SIMEX)$coefficients[,2]))
names(model.SIMEX.se) <- names(model.SIMEX$coefficients)
return(list(model.SIMEX.coefs=model.SIMEX.coefs,
model.SIMEX.se=model.SIMEX.se))
}
realization_of_aid <- function(param_set, aid.project.amount){
param_set_1pjrPerROI <- function(i, param_set=param_set, aid.project.amount=aid.project.amount){
id <- sample(size=1,x=1:length(param_set[,i]), prob=param_set[,i])
col.temp <- as.data.frame(matrix(0,nrow=length(param_set[,i]), ncol=1))
col.temp[id,1] <- 1
return(col.temp)
}
param_set_realization <- as.data.frame(lapply(1:ncol(param_set), param_set_1pjrPerROI, param_set=param_set, aid.project.amount=aid.project.amount))
paramDollars <- lapply(1:length(aid.project.amount), function(i) param_set_realization[,i] * aid.project.amount[i])
paramDollars <- as.data.frame(paramDollars)
dollars_realization <- rowSums(paramDollars)
return(dollars_realization)
}
roxygen2::roxygenise()
devtools::document()
document()
library(devtools)
install_github("itpir/geoSIMEX")
help(geoSIMEX)
help(expected_aid_ROI)
help(calc_lambda)
help(geoSIMEX)
help(expected_aid_ROI)
help(calc_lambda)
help(geoSIMEX)
help(expected_aid_ROI)
help(calc_lambda)
help(prob_aid_ROI)
