# Generating Parameter Set, Expected Aid
param_set = paramSet(aidData=aidData, subcountyData=subcountyData, probAidAssume=probAid_equal)
subcountyData$expectedAid <- dollar_expected_value(param_set=param_set, dollar_set=aidData$aid)
# Calculating Lambda and Running Models
lambda <- calcLambda(param_set,maxLambda_denom, subcountyData$subcountyArea)
aid.expected <- lm(wealth ~ expectedAid, data=subcountyData)
aid.expected_probTrue <- lm(wealth ~ expectedAid + probAid_true, data=subcountyData)
aid.expected_probGuess <- lm(wealth ~ expectedAid + probAid_guess, data=subcountyData)
# Collect Coefficients
results[1] <- lambda
results[2] <- summary(aid.expected)$coefficients[2]
results[3] <- summary(aid.expected)$coefficients[4]
results[4] <- summary(aid.expected_probGuess)$coefficients[2]
results[5] <- summary(aid.expected_probGuess)$coefficients[5]
names(results) <- c("lambda","aid.expected.coef","aid.expected.se","aid.expected_probGuess.coef","aid.expected_probGuess.se")
return(results)
}
bootIter <- function(i, geoSimulateError.results.df, binNum, numFromBin){
geoSimulateError.results.df$rand <- runif(nrow(geoSimulateError.results.df))
geoSimulateError.results.df <- geoSimulateError.results.df[order(geoSimulateError.results.df$rand),]
results.boot <- matrix(NA,nrow=0,ncol=ncol(geoSimulateError.results.df))
results.boot <- as.data.frame(results.boot)
boot.coefs <- as.data.frame(matrix(NA, nrow=1, ncol=2))
names(boot.coefs) <- c("bootSIMEX.aid.expected", "bootSIMEX.aid.expected_probGuess")
# Randomly Pulling from Results Matrix to Get Subsample for Bootstrapping
minLambda <- min(geoSimulateError.results.df$lambda)
maxLambda <- max(geoSimulateError.results.df$lambda)
binSize <- (maxLambda - minLambda) / binNum
binSize_lb <- minLambda
binSize_ub <- minLambda + binSize
for(i in 1:ceiling(1/binSize)){
results.boot <- rbind(results.boot, geoSimulateError.results.df[(geoSimulateError.results.df$lambda >= binSize_lb) & (geoSimulateError.results.df$lambda <= binSize_ub),][1:numFromBin,])
binSize_lb <- binSize_lb + binSize
binSize_ub <- binSize_ub + binSize
}
results.boot <- results.boot[!is.na(results.boot$rand),]
boot.coefs[1,1] <- summary(lm(aid.expected.coef ~ lambda + lambda_sq, data=results.boot))$coefficients[1]
boot.coefs[1,2] <- summary(lm(aid.expected_probGuess.coef ~ lambda + lambda_sq, data=results.boot))$coefficients[1]
return(boot.coefs)
}
make_correlated_data <- function(fixed_data,rho){
if(rho==1){rho<-.999}
n <- length(fixed_data)
theta <- acos(rho)
x2    <- rnorm(n, 2, 0.5)      # new random data
X <- cbind(fixed_data, x2)
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
correlated_data <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]
return(correlated_data)
}
##### SECTION 3: GEOSIMEX MONTE CARLO SIMULATION #####
##### Generating Random Seed Based On Time #####
op <- options(digits.secs = 3)
randN_seed <- Sys.time()
randN_seed <- gsub("-", "", randN_seed, fixed = TRUE)
randN_seed <- gsub(" ", "", randN_seed, fixed = TRUE)
randN_seed <- gsub(":", "", randN_seed, fixed = TRUE)
randN_seed <- gsub(".", "", randN_seed, fixed = TRUE)
randN_seed <- strsplit(randN_seed, "")[[1]]
randN_seed <- paste(randN_seed[7],randN_seed[8],randN_seed[9],randN_seed[10],randN_seed[11],randN_seed[12],randN_seed[13],randN_seed[14],randN_seed[15], sep="")
randN_seed <- as.integer(randN_seed)
set.seed(randN_seed)
numberMC <- 4
results.test.many <- lapply(1:numberMC, geoSIMEX_MC, randN_seed=randN_seed, numberMC=numberMC)
results.test.many.df <- matrix(NA,nrow=0,ncol=ncol(results.test.many[[1]]$summary))
results.test.many.df <- as.data.frame(results.test.many.df)
names(results.test.many.df) <- names(results.test.many[[1]]$summary)
for(i in 1:length(results.test.many)){
results.test.many.df <- rbind(results.test.many.df,results.test.many[[i]]$summary)
}
# Generating Time to Save Results
op <- options(digits.secs = 3)
randN <- Sys.time()
randN <- gsub("-", "", randN, fixed = TRUE)
randN <- gsub(" ", "", randN, fixed = TRUE)
randN <- gsub(":", "", randN, fixed = TRUE)
randN <- gsub(".", "", randN, fixed = TRUE)
##### Saving Results #####
save(results.test.many, file=paste("/sciclone/home10/ramarty/geoSIMEX/results_",randN,".Rda",sep=""))
#save(results.test.many, file=paste("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/results_",randN,".Rda",sep=""))
#save(results.test.many, file=paste("/home/rmarty/geoSIMEX/Results/results_",randN,".Rda",sep=""))
results.test.many
load("/Users/robmarty/Desktop/AidData/MacArthur/MacArthur/modelData/tanzania_correl.RData")
load("/Users/robmarty/Desktop/AidData/MacArthur/MacArthur/modelData/tanzania_correl.RData")
ls
ls()
View(correlogram_data)
correlogram_data
##### Concatonating Results From Multiple SciClone Nodes #####
library(stargazer)
resultFileList <- list.files("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/SciCloneResults2")
for(i in 1:length(resultFileList)){
load(paste("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/SciCloneResults2/",resultFileList[i],sep=""))
# Merging Results Together
if(i == 1){
results.test.many.all <- results.test.many
}
if(i != 1){
results.test.many.all <- append(results.test.many.all,results.test.many)
}
}
##### Getting Summary Results in One Data Frame #####
results.test.many.all.df <- matrix(NA,nrow=0,ncol=ncol(results.test.many.all[[1]]$summary))
results.test.many.all.df <- as.data.frame(results.test.many.all.df)
names(results.test.many.all.df) <- names(results.test.many.all[[1]]$summary)
for(i in 1:length(results.test.many.all)){
results.test.many.all.df <- rbind(results.test.many.all.df,results.test.many.all[[i]]$summary)
}
save(results.test.many.all,results.test.many.all.df, file="~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/concat_results.Rdata")
load("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/concat_results.Rdata")
##### Only Look At Subset of Projects #####
results.test.many.all.df <- results.test.many.all.df[((results.test.many.all.df$simErrorP1 == TRUE) & (results.test.many.all.df$simErrorIncrease == "All")),]
##### Making Variables #####
# Country Type Variable
results.test.many.all.df$countryType[results.test.many.all.df$numSubcounties == 60] <- 1
results.test.many.all.df$countryType[(results.test.many.all.df$numSubcounties == 120) & (results.test.many.all.df$numSubcountyInCounty == 3)] <- 2
results.test.many.all.df$countryType[(results.test.many.all.df$numSubcounties == 120) & (results.test.many.all.df$numSubcountyInCounty == 2)] <- 3
results.test.many.all.df$countryType <- as.factor(results.test.many.all.df$countryType)
# Whether Estimates Contain True Coefficients
results.test.many.all.df$JackSIMEX_IncludeTrueCoef <- 0
results.test.many.all.df$JackSIMEX_IncludeTrueCoef[((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - 2*results.test.many.all.df$jackSIMEX.aid.expected.mean.se) < results.test.many.all.df$trueAidCoef) & ((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef + 2*results.test.many.all.df$jackSIMEX.aid.expected.mean.se) > results.test.many.all.df$trueAidCoef)] <- 1
results.test.many.all.df$BootSIMEX_IncludeTrueCoef <- 0
results.test.many.all.df$BootSIMEX_IncludeTrueCoef[((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - 2*results.test.many.all.df$bootSIMEX.aid.expected.se) < results.test.many.all.df$trueAidCoef) & ((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef + 2*results.test.many.all.df$bootSIMEX.aid.expected.se) > results.test.many.all.df$trueAidCoef)] <- 1
results.test.many.all.df$Naive_IncludeTrueCoef <- 0
results.test.many.all.df$Naive_IncludeTrueCoef[((results.test.many.all.df$naive_model.coef - 2*results.test.many.all.df$naive_model.se) < results.test.many.all.df$trueAidCoef) & ((results.test.many.all.df$naive_model.coef + 2*results.test.many.all.df$naive_model.se) > results.test.many.all.df$trueAidCoef)] <- 1
# Whether Estimates Contain Zero (ie, are significant)
results.test.many.all.df$JackSIMEX_IncludeZero <- 0
results.test.many.all.df$JackSIMEX_IncludeZero[((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - 2*results.test.many.all.df$jackSIMEX.aid.expected.mean.se) < 0) & ((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef + 2*results.test.many.all.df$jackSIMEX.aid.expected.mean.se) > 0)] <- 1
results.test.many.all.df$BootSIMEX_IncludeZero <- 0
results.test.many.all.df$BootSIMEX_IncludeZero[((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - 2*results.test.many.all.df$bootSIMEX.aid.expected.se) < 0) & ((results.test.many.all.df$jackSIMEX.aid.expected.mean.coef + 2*results.test.many.all.df$bootSIMEX.aid.expected.se) > 0)] <- 1
results.test.many.all.df$Naive_IncludeZero <- 0
results.test.many.all.df$Naive_IncludeZero[((results.test.many.all.df$naive_model.coef - 2*results.test.many.all.df$naive_model.se) < 0) & ((results.test.many.all.df$naive_model.coef + 2*results.test.many.all.df$naive_model.se) > 0)] <- 1
results.test.many.all.df$TrueCoef_IncludeZero <- 0
results.test.many.all.df$TrueCoef_IncludeZero[results.test.many.all.df$trueAidCoef == 0] <- 1
# Whether Estimates Are Positively Significant
results.test.many.all.df$JackSIMEX_PositivelySignificant <- 0
results.test.many.all.df$JackSIMEX_PositivelySignificant[(results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - 2*results.test.many.all.df$jackSIMEX.aid.expected.mean.se) > 0] <- 1
results.test.many.all.df$BootSIMEX_PositivelySignificant <- 0
results.test.many.all.df$BootSIMEX_PositivelySignificant[(results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - 2*results.test.many.all.df$bootSIMEX.aid.expected.se) > 0] <- 1
results.test.many.all.df$NaiveSIMEX_PositivelySignificant <- 0
results.test.many.all.df$NaiveSIMEX_PositivelySignificant[(results.test.many.all.df$naive_model.coef - 2*results.test.many.all.df$naive_model.se) > 0] <- 1
# Whether Estimates Are Negatively Significant
results.test.many.all.df$JackSIMEX_NegativelySignificant <- 0
results.test.many.all.df$JackSIMEX_NegativelySignificant[(results.test.many.all.df$jackSIMEX.aid.expected.mean.coef + 2*results.test.many.all.df$jackSIMEX.aid.expected.mean.se) < 0] <- 1
results.test.many.all.df$BootSIMEX_NegativelySignificant <- 0
results.test.many.all.df$BootSIMEX_NegativelySignificant[(results.test.many.all.df$jackSIMEX.aid.expected.mean.coef + 2*results.test.many.all.df$bootSIMEX.aid.expected.se) < 0] <- 1
results.test.many.all.df$NaiveSIMEX_NegativelySignificant <- 0
results.test.many.all.df$NaiveSIMEX_NegativelySignificant[(results.test.many.all.df$naive_model.coef + 2*results.test.many.all.df$naive_model.se) < 0] <- 1
# Whether Coefficients Get Closer to the True Coefficient
results.test.many.all.df$naiveDistToTrue <- abs(results.test.many.all.df$naive_model.coef - results.test.many.all.df$trueAidCoef)
results.test.many.all.df$jackDistToTrue <- abs(results.test.many.all.df$jackSIMEX.aid.expected.mean.coef - results.test.many.all.df$trueAidCoef)
results.test.many.all.df$bootDistToTrue <- abs(results.test.many.all.df$bootSIMEX.aid.expected.coef - results.test.many.all.df$trueAidCoef)
results.test.many.all.df$jackBetterNaive <- 0
results.test.many.all.df$jackBetterNaive[(results.test.many.all.df$jackDistToTrue < results.test.many.all.df$naiveDistToTrue)] <- 1
results.test.many.all.df$bootBetterNaive <- 0
results.test.many.all.df$bootBetterNaive[(results.test.many.all.df$bootDistToTrue < results.test.many.all.df$naiveDistToTrue)] <- 1
# Making variables into factor variables
results.test.many.all.df$numSubcounties <- as.factor(results.test.many.all.df$numSubcounties)
results.test.many.all.df$simErrorP1 <- as.factor(results.test.many.all.df$simErrorP1)
results.test.many.all.df$simErrorIncrease <- as.factor(results.test.many.all.df$simErrorIncrease)
results.test.many.all.df$numSIMEXiter_sq <- results.test.many.all.df$numSIMEXiter^2
##### False Positives Summary Statistics #####
results.test.many.all.df.TrueEqNot0 <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef != 0),]
results.test.many.all.df.TrueEq0 <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 0),]
results.test.many.all.df.TrueEq1 <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 1),]
results.test.many.all.df.TrueEq10 <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 10),]
results.test.many.all.df.TrueEq0_smallLambda <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 0) & (results.test.many.all.df$lambda_naive <= 0.5),]
results.test.many.all.df.TrueEq1_smallLambda <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 1) & (results.test.many.all.df$lambda_naive <= 0.5),]
results.test.many.all.df.TrueEq10_smallLambda <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 10) & (results.test.many.all.df$lambda_naive <= 0.5),]
results.test.many.all.df.TrueEq0_bigLambda <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 0) & (results.test.many.all.df$lambda_naive > 0.5),]
results.test.many.all.df.TrueEq1_bigLambda <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 1) & (results.test.many.all.df$lambda_naive > 0.5),]
results.test.many.all.df.TrueEq10_bigLambda <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 10) & (results.test.many.all.df$lambda_naive > 0.5),]
sink("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/summaryStatistics_significance.tex", append=FALSE, split=FALSE)
cat(as.character("{\\bf If True Coefficient = 0}"), as.character("\\"), as.character("\\"),sep="")
cat(as.character("\\begin{tabular}{l l l l | l l l | l l l}"))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" "), as.character("& \\multicolumn{3}{c}{All, N="), nrow(results.test.many.all.df.TrueEq0), as.character("}"), as.character("& \\multicolumn{3}{c}{Lambda $<$ 0.5, N="),nrow(results.test.many.all.df.TrueEq0_smallLambda), as.character("}"), as.character("& \\multicolumn{3}{c}{Lambda $>$ 0.5, N="),nrow(results.test.many.all.df.TrueEq0_bigLambda),as.character("}"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("& Jackknife & Bootstrap & Naive & Jackknife & Bootstrap & Naive & Jackknife & Bootstrap & Naive "), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("Contains True Coef (0) & "),                round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),            as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),             as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),                      as.character("\\"), as.character("\\"), sep="")
cat(as.character("Positively Significant & "),                round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),  as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),                as.character("\\"), as.character("\\"), sep="")
cat(as.character("Insignificant & "),                         round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),                as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),                       as.character("\\"), as.character("\\"), sep="")
cat(as.character("Negatively Significant & "),                round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$NaiveSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$Naive_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3) ,                as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$NaiveSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),              as.character("\\"), as.character("\\"), sep="")
cat(as.character("Closer to True Coefficient than Naive & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0[results.test.many.all.df.TrueEq0$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq0),3),                 as.character(" & "),                                                                                                                                                                    as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_smallLambda[results.test.many.all.df.TrueEq0_smallLambda$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq0_smallLambda),3),                 as.character(" & "),                                                                                                                                                                                                         as.character(" & "),  round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq0_bigLambda[results.test.many.all.df.TrueEq0_bigLambda$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq0_bigLambda),3),                 as.character(" & "),         as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("\\end{tabular}"))
cat(as.character(" "))
cat(as.character("\\"), as.character("\\"), as.character("\\"), as.character("\\"), sep="")
cat(as.character("\\"), as.character("\\"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "))
cat(as.character("{\\bf If True Coefficient = 1}"), as.character("\\"), as.character("\\"),sep="")
cat(as.character("\\begin{tabular}{l l l l | l l l | l l l}"))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" "), as.character("& \\multicolumn{3}{c}{All, N="), nrow(results.test.many.all.df.TrueEq1), as.character("}"), as.character("& \\multicolumn{3}{c}{Lambda $<$ 0.5, N="),nrow(results.test.many.all.df.TrueEq1_smallLambda), as.character("}"), as.character("& \\multicolumn{3}{c}{Lambda $>$ 0.5, N="),nrow(results.test.many.all.df.TrueEq1_bigLambda),as.character("}"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("& Jackknife & Bootstrap & Naive & Jackknife & Bootstrap & Naive & Jackknife & Bootstrap & Naive "), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("Contains True Coef (1) & "),                round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),            as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),             as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),                      as.character("\\"), as.character("\\"), sep="")
cat(as.character("Contains True Coef (1) {\\sl and} Significant & "),                round(nrow(results.test.many.all.df.TrueEq1[(results.test.many.all.df.TrueEq1$JackSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1$JackSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[(results.test.many.all.df.TrueEq1$BootSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1$BootSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[(results.test.many.all.df.TrueEq1$Naive_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1$Naive_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1),3),            as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[(results.test.many.all.df.TrueEq1_smallLambda$JackSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1_smallLambda$JackSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[(results.test.many.all.df.TrueEq1_smallLambda$BootSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1_smallLambda$BootSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[(results.test.many.all.df.TrueEq1_smallLambda$Naive_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1_smallLambda$Naive_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),             as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[(results.test.many.all.df.TrueEq1_bigLambda$JackSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1_bigLambda$JackSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[(results.test.many.all.df.TrueEq1_bigLambda$BootSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1_bigLambda$BootSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[(results.test.many.all.df.TrueEq1_bigLambda$Naive_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq1_bigLambda$Naive_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),                      as.character("\\"), as.character("\\"), sep="")
cat(as.character("Positively Significant & "),                round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),  as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),                as.character("\\"), as.character("\\"), sep="")
cat(as.character("Insignificant & "),                         round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),                as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),                       as.character("\\"), as.character("\\"), sep="")
cat(as.character("Negatively Significant & "),                round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$NaiveSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$Naive_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3) ,                as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$NaiveSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),              as.character("\\"), as.character("\\"), sep="")
cat(as.character("Closer to True Coefficient than Naive & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1[results.test.many.all.df.TrueEq1$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq1),3),                 as.character(" & "),                                                                                                                                                                    as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_smallLambda[results.test.many.all.df.TrueEq1_smallLambda$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq1_smallLambda),3),                 as.character(" & "),                                                                                                                                                                                                         as.character(" & "),  round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq1_bigLambda[results.test.many.all.df.TrueEq1_bigLambda$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq1_bigLambda),3),                 as.character(" & "),         as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("\\end{tabular}"))
cat(as.character(" "))
cat(as.character("\\"), as.character("\\"), as.character("\\"), as.character("\\"), sep="")
cat(as.character("\\"), as.character("\\"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "))
cat(as.character("{\\bf If True Coefficient = 10}"), as.character("\\"), as.character("\\"),sep="")
cat(as.character("\\begin{tabular}{l l l l | l l l | l l l}"))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" "), as.character("& \\multicolumn{3}{c}{All, N="), nrow(results.test.many.all.df.TrueEq10), as.character("}"), as.character("& \\multicolumn{3}{c}{Lambda $<$ 0.5, N="),nrow(results.test.many.all.df.TrueEq10_smallLambda), as.character("}"), as.character("& \\multicolumn{3}{c}{Lambda $>$ 0.5, N="),nrow(results.test.many.all.df.TrueEq10_bigLambda),as.character("}"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("& Jackknife & Bootstrap & Naive & Jackknife & Bootstrap & Naive & Jackknife & Bootstrap & Naive "), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("Contains True Coef (10) & "),                round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),            as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),             as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$JackSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$BootSIMEX_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$Naive_IncludeTrueCoef == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),                      as.character("\\"), as.character("\\"), sep="")
cat(as.character("Contains True Coef (10) {\\sl and} Significant & "),                round(nrow(results.test.many.all.df.TrueEq10[(results.test.many.all.df.TrueEq10$JackSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10$JackSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[(results.test.many.all.df.TrueEq10$BootSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10$BootSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[(results.test.many.all.df.TrueEq10$Naive_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10$Naive_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10),3),            as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[(results.test.many.all.df.TrueEq10_smallLambda$JackSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10_smallLambda$JackSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[(results.test.many.all.df.TrueEq10_smallLambda$BootSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10_smallLambda$BootSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[(results.test.many.all.df.TrueEq10_smallLambda$Naive_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10_smallLambda$Naive_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),             as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[(results.test.many.all.df.TrueEq10_bigLambda$JackSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10_bigLambda$JackSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[(results.test.many.all.df.TrueEq10_bigLambda$BootSIMEX_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10_bigLambda$BootSIMEX_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),       as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[(results.test.many.all.df.TrueEq10_bigLambda$Naive_IncludeTrueCoef == 1) & (results.test.many.all.df.TrueEq10_bigLambda$Naive_IncludeZero == 0),]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),                      as.character("\\"), as.character("\\"), sep="")
cat(as.character("Positively Significant & "),                round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),  as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$JackSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$BootSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$NaiveSIMEX_PositivelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),                as.character("\\"), as.character("\\"), sep="")
cat(as.character("Insignificant & "),                         round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),                as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$JackSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$BootSIMEX_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$Naive_IncludeZero == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),                       as.character("\\"), as.character("\\"), sep="")
cat(as.character("Negatively Significant & "),                round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$NaiveSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),           as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$Naive_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3) ,                as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$JackSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$BootSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3), as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$NaiveSIMEX_NegativelySignificant == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),              as.character("\\"), as.character("\\"), sep="")
cat(as.character("Closer to True Coefficient than Naive & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10[results.test.many.all.df.TrueEq10$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq10),3),                 as.character(" & "),                                                                                                                                                                    as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_smallLambda[results.test.many.all.df.TrueEq10_smallLambda$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq10_smallLambda),3),                 as.character(" & "),                                                                                                                                                                                                         as.character(" & "),  round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$jackBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),                 as.character(" & "), round(nrow(results.test.many.all.df.TrueEq10_bigLambda[results.test.many.all.df.TrueEq10_bigLambda$bootBetterNaive == 1,]) / nrow(results.test.many.all.df.TrueEq10_bigLambda),3),                 as.character(" & "),         as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("\\end{tabular}"))
sink()
##### Bin Size Summary Statistics #####
results.test.many.all.df.TrueEq0 <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef == 0),]
results.test.many.all.df.TrueEqNot0 <- results.test.many.all.df[(results.test.many.all.df$trueAidCoef != 0),]
sink("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/sumstat_binSize.tex", append=FALSE, split=FALSE)
cat(as.character("\\begin{tabular}{c | c c c | c c | c c c}"))
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" & \\multicolumn{5}{c |}{True Coefficient Not 0} & \\multicolumn{3}{c}{True Coefficient = 0}"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character(" & & \\multicolumn{2}{c |}{Bootstrap} & \\multicolumn{2}{c |}{Naive} & & Bootstrap & Naive "), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
cat(as.character("Bin  & N & Contains & Contins True    & Contains & Contains True   & N & Contains & Contains"), as.character("\\"), as.character("\\"), sep="")
cat(as.character("Size &   & True     & and Significant & True     & and Significant &   & True     & True"), as.character("\\"), as.character("\\"), sep="")
cat(as.character(" "), as.character("\\hline "))
for(i in 3:10){
df.not0 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==i),]
df.0 <- results.test.many.all.df.TrueEq0[(results.test.many.all.df.TrueEq0$binNum==i),]
cat(i, as.character("&"))
cat(nrow(df.not0), as.character("&"))
cat(round(nrow(df.not0[df.not0$BootSIMEX_IncludeTrueCoef==1,]) / nrow(df.not0),3), as.character("&"))
cat(round(nrow(df.not0[(df.not0$BootSIMEX_IncludeTrueCoef==1) & (df.not0$BootSIMEX_IncludeZero==0),]) / nrow(df.not0),3), as.character("&"))
cat(round(nrow(df.not0[df.not0$Naive_IncludeTrueCoef==1,]) / nrow(df.not0),3), as.character("&"))
cat(round(nrow(df.not0[(df.not0$Naive_IncludeTrueCoef==1) & (df.not0$Naive_IncludeZero==0),]) / nrow(df.not0),3), as.character("&"))
cat(nrow(df.0), as.character("&"))
cat(round(nrow(df.0[df.0$BootSIMEX_IncludeTrueCoef==1,]) / nrow(df.0),3), as.character("&"))
cat(round(nrow(df.0[df.0$Naive_IncludeTrueCoef==1,]) / nrow(df.0),3))
cat(as.character(" "), as.character("\\"), as.character("\\"), sep="")
}
cat(as.character(" "), as.character("\\hline "))
cat(as.character("\\end{tabular}"))
sink()
results.test.many.all.df.TrueEqNot0.bin3 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==3),]
results.test.many.all.df.TrueEqNot0.bin4 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==4),]
results.test.many.all.df.TrueEqNot0.bin5 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==5),]
results.test.many.all.df.TrueEqNot0.bin6 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==6),]
results.test.many.all.df.TrueEqNot0.bin7 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==7),]
results.test.many.all.df.TrueEqNot0.bin8 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==8),]
results.test.many.all.df.TrueEqNot0.bin9 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==9),]
results.test.many.all.df.TrueEqNot0.bin10 <- results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$binNum==10),]
##### Summary Statistics #####
sink("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/summaryStatistics.tex", append=FALSE, split=FALSE)
cat(as.character("{\\bf How Often geoSIMEX Improves Results}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Among these "), length(results.test.many.all.df$jackBetterNaive), as.character(" models, Jackknife estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df$jackBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("Among these "), length(results.test.many.all.df$bootBetterNaive), as.character(" models, Bootstrap estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df$bootBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "),length(results.test.many.all.df$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient But Do Not Include Zero (When True Coef Is Not 0) (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$Naive_IncludeTrueCoef == 0) & (results.test.many.all.dfresults.text.many.all.df.TrueEqNot0$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.TrueEqNot0$BootSIMEX_IncludeTrueCoef[results.test.many.all.df$BootSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.TrueEqNot0$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.TrueEqNot0$BootSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.TrueEqNot0$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.TrueEqNot0$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
sink()
nrow(results.test.many.all.df.TrueEqNot0[(results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeZero == 0) & (results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeTrueCoef == 1),]) / nrow(results.test.many.all.df.TrueEqNot0)
round(mean(results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.TrueEqNot0$JackSIMEX_IncludeZero == 0]),2)*100
##### All Models #####
# Jackknife Regressions - all
simple.jack.lambda_naive <- glm(JackSIMEX_IncludeTrueCoef ~ lambda_naive,  data=results.test.many.all.df, family="binomial")
simple.jack.countryType <- glm(JackSIMEX_IncludeTrueCoef ~ countryType,  data=results.test.many.all.df, family="binomial")
simple.jack.simErrorP1 <- glm(JackSIMEX_IncludeTrueCoef ~ simErrorP1,  data=results.test.many.all.df, family="binomial")
simple.jack.simErrorIncrease <- glm(JackSIMEX_IncludeTrueCoef ~ simErrorIncrease,  data=results.test.many.all.df, family="binomial")
simple.jack.numSIMEXiter <- glm(JackSIMEX_IncludeTrueCoef ~ numSIMEXiter,  data=results.test.many.all.df, family="binomial")
simple.jack.numberProjects <- glm(JackSIMEX_IncludeTrueCoef ~ numberProjects,  data=results.test.many.all.df, family="binomial")
jack.all <- glm(JackSIMEX_IncludeTrueCoef ~ lambda_naive + countryType + simErrorP1 + simErrorIncrease + numSIMEXiter + numberProjects, data=results.test.many.all.df, family="binomial")
stargazer(simple.jack.lambda_naive,
simple.jack.countryType,
simple.jack.simErrorP1,
simple.jack.simErrorIncrease,
simple.jack.numSIMEXiter,
simple.jack.numberProjects,
jack.all,
title="Jackknife - Logistic Models",
omit.stat = c("f","ser"),
align=TRUE,
no.space=TRUE,
dep.var.caption = "Jackknife Estimate Includes True Coefficient (within 2 standard errors)",
dep.var.labels   = "",
column.sep.width = "1pt",
out="~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/jack.tex")
# Bootstrap Regressions - all
simple.boot.lambda_naive <- glm(BootSIMEX_IncludeTrueCoef ~ lambda_naive,  data=results.test.many.all.df, family="binomial")
simple.boot.countryType <- glm(BootSIMEX_IncludeTrueCoef ~ countryType,  data=results.test.many.all.df, family="binomial")
simple.boot.simErrorP1 <- glm(BootSIMEX_IncludeTrueCoef ~ simErrorP1,  data=results.test.many.all.df, family="binomial")
simple.boot.simErrorIncrease <- glm(BootSIMEX_IncludeTrueCoef ~ simErrorIncrease,  data=results.test.many.all.df, family="binomial")
simple.boot.numSIMEXiter <- glm(BootSIMEX_IncludeTrueCoef ~ numSIMEXiter,  data=results.test.many.all.df, family="binomial")
simple.boot.numberProjects <- glm(BootSIMEX_IncludeTrueCoef ~ numberProjects,  data=results.test.many.all.df, family="binomial")
simple.boot.binNum <- glm(BootSIMEX_IncludeTrueCoef ~ binNum,  data=results.test.many.all.df, family="binomial")
simple.boot.numFromBin <- glm(BootSIMEX_IncludeTrueCoef ~ numFromBin,  data=results.test.many.all.df, family="binomial")
boot.all <- glm(BootSIMEX_IncludeTrueCoef ~ lambda_naive + countryType + simErrorP1 + simErrorIncrease + numSIMEXiter + numberProjects + binNum + numFromBin, data=results.test.many.all.df, family="binomial")
stargazer(simple.boot.lambda_naive,
simple.boot.countryType,
simple.boot.simErrorP1,
simple.boot.simErrorIncrease,
simple.boot.numSIMEXiter,
simple.boot.numberProjects,
simple.boot.binNum,
simple.boot.numFromBin,
boot.all,
title="Bootstrap - Logistic Models",
omit.stat = c("f","ser"),
align=TRUE,
no.space=TRUE,
dep.var.caption = "Bootstrap Estimate Includes True Coefficient (within 2 standard errors)",
dep.var.labels   = "",
column.sep.width = "1pt",
out="~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/boot.tex")
##### Only If Naive Doesn't Capture True #####
# Jackknife Regressions - Naive Doesn't Capture
simple.jack.lambda_naive <- glm(JackSIMEX_IncludeTrueCoef ~ lambda_naive,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.jack.countryType <- glm(JackSIMEX_IncludeTrueCoef ~ countryType,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.jack.simErrorP1 <- glm(JackSIMEX_IncludeTrueCoef ~ simErrorP1,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.jack.simErrorIncrease <- glm(JackSIMEX_IncludeTrueCoef ~ simErrorIncrease,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.jack.numSIMEXiter <- glm(JackSIMEX_IncludeTrueCoef ~ numSIMEXiter,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.jack.numberProjects <- glm(JackSIMEX_IncludeTrueCoef ~ numberProjects,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
jack.all <- glm(JackSIMEX_IncludeTrueCoef ~ lambda_naive + countryType + simErrorP1 + simErrorIncrease + numSIMEXiter + numberProjects, data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
stargazer(simple.jack.lambda_naive,
simple.jack.countryType,
simple.jack.simErrorP1,
simple.jack.simErrorIncrease,
simple.jack.numSIMEXiter,
simple.jack.numberProjects,
jack.all,
title="Jackknife - Logistic Models",
omit.stat = c("f","ser"),
align=TRUE,
no.space=TRUE,
dep.var.caption = "Jackknife Estimate Includes True Coefficient (within 2 standard errors)",
dep.var.labels   = "",
column.sep.width = "1pt",
out="~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/jack_naiveWrong.tex")
# Bootstrap Regressions - Naive Doesn't Capture
simple.boot.lambda_naive <- glm(BootSIMEX_IncludeTrueCoef ~ lambda_naive,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.countryType <- glm(BootSIMEX_IncludeTrueCoef ~ countryType,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.simErrorP1 <- glm(BootSIMEX_IncludeTrueCoef ~ simErrorP1,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.simErrorIncrease <- glm(BootSIMEX_IncludeTrueCoef ~ simErrorIncrease,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.numSIMEXiter <- glm(BootSIMEX_IncludeTrueCoef ~ numSIMEXiter,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.numberProjects <- glm(BootSIMEX_IncludeTrueCoef ~ numberProjects,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.binNum <- glm(BootSIMEX_IncludeTrueCoef ~ binNum,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
simple.boot.numFromBin <- glm(BootSIMEX_IncludeTrueCoef ~ numFromBin,  data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
boot.all <- glm(BootSIMEX_IncludeTrueCoef ~ lambda_naive + countryType + simErrorP1 + simErrorIncrease + numSIMEXiter + numberProjects + binNum + numFromBin, data=results.test.many.all.df[results.test.many.all.df$Naive_IncludeTrueCoef == 0,], family="binomial")
stargazer(simple.boot.lambda_naive,
simple.boot.countryType,
simple.boot.simErrorP1,
simple.boot.simErrorIncrease,
simple.boot.numSIMEXiter,
simple.boot.numberProjects,
simple.boot.binNum,
simple.boot.numFromBin,
boot.all,
title="Bootstrap - Logistic Models",
omit.stat = c("f","ser"),
align=TRUE,
no.space=TRUE,
dep.var.caption = "Bootstrap Estimate Includes True Coefficient (within 2 standard errors)",
dep.var.labels   = "",
column.sep.width = "1pt",
out="~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/boot_naiveWrong.tex")
##### When Naive Doesn't Capture True Coefficient #####
results.test.many.all.df$lambda_naive_sq <- results.test.many.all.df$lambda_naive^2
simple.naiveIncTrue.lambda_naive <- glm(Naive_IncludeTrueCoef ~ lambda_naive, data=results.test.many.all.df, family="binomial")
simple.naiveIncTrue.lambda_naive_sq <- glm(Naive_IncludeTrueCoef ~ lambda_naive + lambda_naive_sq, data=results.test.many.all.df, family="binomial")
simple.naiveIncTrue.countryType <- glm(Naive_IncludeTrueCoef ~ countryType, data=results.test.many.all.df, family="binomial")
simple.naiveIncTrue.probAidTrue_gammaShape <- glm(Naive_IncludeTrueCoef ~ probAidTrue_gammaShape, data=results.test.many.all.df, family="binomial")
simple.naiveIncTrue.cor.probAid_guess.aidTrue <- glm(Naive_IncludeTrueCoef ~ cor.probAid_guess.aidTrue, data=results.test.many.all.df, family="binomial")
simple.naiveIncTrue.numberProjects<- glm(Naive_IncludeTrueCoef ~ numberProjects, data=results.test.many.all.df, family="binomial")
naiveIncTrue.all <- glm(Naive_IncludeTrueCoef ~ lambda_naive + lambda_naive_sq + countryType + probAidTrue_gammaShape + cor.probAid_guess.aidTrue + numberProjects, data=results.test.many.all.df, family="binomial")
stargazer(simple.naiveIncTrue.lambda_naive,
simple.naiveIncTrue.lambda_naive_sq,
simple.naiveIncTrue.countryType,
simple.naiveIncTrue.probAidTrue_gammaShape,
simple.naiveIncTrue.cor.probAid_guess.aidTrue,
simple.naiveIncTrue.numberProjects,
naiveIncTrue.all,
title="Naive Model Contains True Coef? - Logistic Models",
omit.stat = c("f","ser"),
align=TRUE,
no.space=TRUE,
dep.var.caption = "Naive Estimate Includes True Coefficient (within 2 standard errors)",
dep.var.labels   = "",
column.sep.width = "1pt",
out="~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/naive_containTrue.tex")
##### Summary Statistics: Might do Better V1 ####
results.test.many.all.df.better_v1 <- results.test.many.all.df[results.test.many.all.df$simErrorP1 == TRUE,]
sink("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/summaryStatistics_better_v1.tex", append=FALSE, split=FALSE)
cat(as.character("{\\bf How Often geoSIMEX Improves Results}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Among these "), length(results.test.many.all.df.better_v1$jackBetterNaive), as.character(" models, Jackknife estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df.better_v1$jackBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("Among these "), length(results.test.many.all.df.better_v1$bootBetterNaive), as.character(" models, Bootstrap estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df.better_v1$bootBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df.better_v1$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "),length(results.test.many.all.df.better_v1$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df.better_v1[results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v1[results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df.better_v1$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v1$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df.better_v1[results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v1[results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient But Do Not Include Zero (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v1$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v1$JackSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v1$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v1$JackSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v1[(results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v1$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v1[(results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v1$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v1$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v1$BootSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v1$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v1$BootSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v1[(results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v1$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v1[(results.test.many.all.df.better_v1$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v1$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
sink()
##### Summary Statistics: Might do Better V2 ####
results.test.many.all.df.better_v2 <- results.test.many.all.df[results.test.many.all.df$simErrorIncrease == "All",]
sink("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/summaryStatistics_better_v2.tex", append=FALSE, split=FALSE)
cat(as.character("{\\bf How Often geoSIMEX Improves Results}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Among these "), length(results.test.many.all.df.better_v2$jackBetterNaive), as.character(" models, Jackknife estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df.better_v2$jackBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("Among these "), length(results.test.many.all.df.better_v2$bootBetterNaive), as.character(" models, Bootstrap estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df.better_v2$bootBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df.better_v2$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "),length(results.test.many.all.df.better_v2$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df.better_v2[results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v2[results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df.better_v2$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v2$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df.better_v2[results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v2[results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient But Do Not Include Zero (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v2$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v2$JackSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v2$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v2$JackSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v2[(results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v2$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v2[(results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v2$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v2$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v2$BootSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v2$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v2$BootSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v2[(results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v2$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v2[(results.test.many.all.df.better_v2$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v2$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
sink()
##### Summary Statistics: Might do Better V3 ####
results.test.many.all.df.better_v3 <- results.test.many.all.df[(results.test.many.all.df$simErrorP1 == TRUE) & (results.test.many.all.df$simErrorIncrease == "All"),]
sink("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX_results/stargazerFiles/summaryStatistics_better_v3.tex", append=FALSE, split=FALSE)
cat(as.character("{\\bf How Often geoSIMEX Improves Results}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Among these "), length(results.test.many.all.df.better_v3$jackBetterNaive), as.character(" models, Jackknife estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df.better_v3$jackBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("Among these "), length(results.test.many.all.df.better_v3$bootBetterNaive), as.character(" models, Bootstrap estimates get closer to the true coefficient than the naive model "), round(mean(results.test.many.all.df.better_v3$bootBetterNaive),2)*100, as.character("\\% of the time."),as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df.better_v3$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "),length(results.test.many.all.df.better_v3$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient "), round(mean(results.test.many.all.df.better_v3[results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v3[results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0,]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df.better_v3$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v3$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient "), round(mean(results.test.many.all.df.better_v3[results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v3[results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0,]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),as.character("\\"),as.character("\\"),sep="")
cat(as.character("{\\bf Percent of Times that geoSIMEX Models Capture True Coefficient But Do Not Include Zero (Coef +/- 2*SE)}"))
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v3$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v3$JackSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v3$JackSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v3$JackSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Jackknife results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v3[(results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v3$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v3[(results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v3$JackSIMEX_IncludeZero == 0),]$JackSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
cat(as.character("\\"),as.character("\\"),sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v3$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v3$BootSIMEX_IncludeZero == 0]),2)*100, as.character("\\% of the time. N = "), length(results.test.many.all.df.better_v3$BootSIMEX_IncludeTrueCoef[results.test.many.all.df.better_v3$BootSIMEX_IncludeZero == 0]), as.character("\\"),as.character("\\"), sep="")
cat(as.character("Bootstrap results include true coefficient, but not zero, "), round(mean(results.test.many.all.df.better_v3[(results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v3$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef),2)*100, as.character("\\% of the time when the naive model does not include the true coefficient. N = "), length(results.test.many.all.df.better_v3[(results.test.many.all.df.better_v3$Naive_IncludeTrueCoef == 0) & (results.test.many.all.df.better_v3$BootSIMEX_IncludeZero == 0),]$BootSIMEX_IncludeTrueCoef), as.character("\\"),as.character("\\"), sep="")
sink()
