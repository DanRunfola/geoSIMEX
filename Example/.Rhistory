roi.area="Shape_Area",
roi.prob.aid = "ncc4_2000e.alloc",
roi.pc1.name="NAME_2.id",
roi.pc2.name="NAME_2.id",
roi.pc3.name="NAME_2.id",
roi.pc4.name="NAME_1.id",
roi.pc5.name="NAME_1.id",
roi.pc6.name="NAME_0.id",
aid.pc1.centroid.name="NAME_2.id",
aid.precision.code="precision_code",
sim_pc1=sim_pc1.TF)
model.geoSIMEX.expected_aid.lowPC <- geoSIMEX(model=model.naive.expected_aid.lowPC,
geoSIMEXvariable="expected_aid.lowPC",
roiData=dta.all.adm2,
aidData=macArth.inf,
aid.amount="even_split_commitments",
iterations=500,
bins=4,
roi.area="Shape_Area",
roi.prob.aid = "expected_aid.lowPConly.alloc",
roi.pc1.name="NAME_2.id",
roi.pc2.name="NAME_2.id",
roi.pc3.name="NAME_2.id",
roi.pc4.name="NAME_1.id",
roi.pc5.name="NAME_1.id",
roi.pc6.name="NAME_0.id",
aid.pc1.centroid.name="NAME_2.id",
aid.precision.code="precision_code",
sim_pc1=sim_pc1.TF)
#model.geoSIMEX.expected_aid$variance.model.imprecision$expected_aid[1] / sum(model.geoSIMEX.expected_aid$variance.model.imprecision$expected_aid)
#model.geoSIMEX.expected_aid$variance.model.imprecision$expected_aid[2] / sum(model.geoSIMEX.expected_aid$variance.model.imprecision$expected_aid)
#---------------------------------------------------#
##### * Model Averaging Models * #####
#---------------------------------------------------#
model.modelAvg_randProb.expected_aid <- modelAverageRandProb(iterations=5,
aidData=macArth.inf,
roiData=dta.all.adm2,
aid.amount="even_split_commitments",
model=model.naive.expected_aid.area,
geoSIMEXvariable="expected_aid.area",
binary=FALSE,
aid.precision.code="precision_code",
roi.pc1.name="NAME_2.id",
roi.pc2.name="NAME_2.id",
roi.pc3.name="NAME_2.id",
roi.pc4.name="NAME_1.id",
roi.pc5.name="NAME_1.id",
roi.pc6.name="NAME_0.id",
aid.pc1.centroid.name="NAME_2.id")
#---------------------------------------------------#
##### * Collecting Results * #####
#---------------------------------------------------#
results.df <- as.data.frame(matrix(NA, ncol=0, nrow=1))
# Parameters
results.df$data.subset.countries <- paste(data.subset.countries, collapse=', ' )
results.df$analysis.year.begin <- analysis.year.begin
results.df$analysis.year.end <- analysis.year.end
results.df$aid.year.begin <- aid.year.begin
results.df$aid.year.end <- aid.year.end
results.df$infrastructureAid <- infrastructureAid
results.df$numberProjects <- numberProjects
results.df$sim_pc1.TF <- sim_pc1.TF
# Lambda Naive Model
results.df$lambda <- model.geoSIMEX.expected_aid.area$lambda
# Number Units of Analysis
results.df$num_projects <- nrow(macArth.inf)
results.df$num_ADM <- nrow(dta.all.adm2)
# Naive Models
results.df$naive.area.coef <- as.numeric(summary(model.naive.expected_aid.area)$coefficients[2,][1])
results.df$naive.area.pvalue <- as.numeric(summary(model.naive.expected_aid.area)$coefficients[2,][4])
results.df$naive.population.coef <- as.numeric(summary(model.naive.expected_aid.population)$coefficients[2,][1])
results.df$naive.population.pvalue <- as.numeric(summary(model.naive.expected_aid.population)$coefficients[2,][4])
results.df$naive.NTL.coef <- as.numeric(summary(model.naive.expected_aid.NTL)$coefficients[2,][1])
results.df$naive.NTL.pvalue <- as.numeric(summary(model.naive.expected_aid.NTL)$coefficients[2,][4])
results.df$naive.lowPC.coef <- as.numeric(summary(model.naive.expected_aid.lowPC)$coefficients[2,][1])
results.df$naive.lowPC.pvalue <- as.numeric(summary(model.naive.expected_aid.lowPC)$coefficients[2,][4])
# geoSIMEX Models
results.df$geoSIMEX.area.coef <- summary(model.geoSIMEX.expected_aid.area)$coefficients[2,]$Estimate
results.df$geoSIMEX.area.pvalue <- summary(model.geoSIMEX.expected_aid.area)$coefficients[2,]$p.value
results.df$geoSIMEX.population.coef <- summary(model.geoSIMEX.expected_aid.population)$coefficients[2,]$Estimate
results.df$geoSIMEX.population.pvalue <- summary(model.geoSIMEX.expected_aid.population)$coefficients[2,]$p.value
results.df$geoSIMEX.NTL.coef <- summary(model.geoSIMEX.expected_aid.NTL)$coefficients[2,]$Estimate
results.df$geoSIMEX.NTL.pvalue <- summary(model.geoSIMEX.expected_aid.NTL)$coefficients[2,]$p.value
results.df$geoSIMEX.lowPC.coef <- summary(model.geoSIMEX.expected_aid.lowPC)$coefficients[2,]$Estimate
results.df$geoSIMEX.lowPC.pvalue <- summary(model.geoSIMEX.expected_aid.lowPC)$coefficients[2,]$p.value
# Model Average model
results.df$modelavg.coef <- summary(model.modelAvg_randProb.expected_aid)$coefficients[2,]$Estimate
results.df$modelavg.pvalue <- summary(model.modelAvg_randProb.expected_aid)$coefficients[2,]$p.value
##### Output Results #####
#results.df
# Make model average name different
names(model.modelAvg_randProb.expected_aid$coefficients)[names(model.modelAvg_randProb.expected_aid$coefficients) == "expected_aid.area"] <- "expected_aid"
##### Stargazer #####
stargazer(model.naive.expected_aid.area,
model.naive.expected_aid.population,
model.naive.expected_aid.NTL,
model.naive.expected_aid.lowPC,
model.geoSIMEX.expected_aid.area,
model.geoSIMEX.expected_aid.population,
model.geoSIMEX.expected_aid.NTL,
model.geoSIMEX.expected_aid.lowPC,
omit.stat=c("LL","ser","f"),
column.sep.width=".01",
keep=c("expected_aid",
"expected_aid.area",
"expected_aid.population",
"expected_aid.NTL",
"expected_aid.lowPC"),
covariate.labels=c("Aid (Area)",
"Aid (Population)",
"Aid (NTL)",
"Aid (Low PC Aid)"),
column.labels=c('Naive','geoSIMEX', 'M.A.'),
column.separate = c(4, 4, 1),
dep.var.labels = "Percent Forest Loss",
report=('vc*sp'),
out=paste("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/case_study/Analysis/Stargazer/scenario_",scenario,".tex",sep=""))
if(scenario==4){
ylim_common = c(-.020,.020)
} else{
ylim_common="default"
}
pdf(paste("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/paper/Figures/geoSIMEX_plots_scenario_",scenario,".png",sep=""), height=10, width=10)
par(mfrow=c(2,2))
plot(model.geoSIMEX.expected_aid.area, variable="expected_aid.area", allSimulations=TRUE, ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.population, variable="expected_aid.population", allSimulations=TRUE, ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.NTL, variable="expected_aid.NTL", allSimulations=TRUE, ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.lowPC, variable="expected_aid.lowPC", allSimulations=TRUE, ylim=ylim_common)
dev.off()
# ^ this is a lot more flat. need to get scales similar in plots!
plot(model.geoSIMEX.expected_aid.area, variable="expected_aid.area", allSimulations=TRUE, ylim=ylim_common)
plot.geoSIMEX <- function(x, variable, confInt = 95, allSimulations=FALSE, includeTitle=TRUE, name_variable=""){
#name_variable = variable
# NOTE: Can make things like "all simulations", "confidence bands", "% interval"
# all parameters / options.
if(name_variable == ""){
variable_name =  variable
} else {
variable_name = name_variable
}
# Calculating 95\% Confidence Bands
t_critical <- qt((1-confInt/100), x$df)
coef.geoSIMEX <- x$coefficients[,variable]
se.geoSIMEX <- x$StdErr[,variable]
CI.geoSIMEX <- as.data.frame(matrix(NA, nrow=2, ncol=2))
names(CI.geoSIMEX) <- c("value", "lambda")
CI.geoSIMEX$lambda <- 0
CI.geoSIMEX$value[1] <- coef.geoSIMEX - t_critical*se.geoSIMEX
CI.geoSIMEX$value[2] <- coef.geoSIMEX + t_critical*se.geoSIMEX
coef.naive <- as.data.frame(t(x$naive.model$coefficients))[,variable]
se.naive <- as.data.frame(summary(x$naive.model)$coefficients)[variable,2]
CI.naive <- as.data.frame(matrix(NA, nrow=2, ncol=2))
names(CI.naive) <- c("value", "lambda")
CI.naive$lambda <- x$lambda_naive
CI.naive$value[1] <- coef.naive - t_critical*se.naive
CI.naive$value[2] <- coef.naive + t_critical*se.naive
# All Variable Values to Define Min / Max ylim of Plot
var.vales.all <- c(x$valuesMean[,variable], x$values[,variable], x$coefficients[,variable], CI.geoSIMEX$value[1], CI.geoSIMEX$value[2], CI.naive$value[1], CI.naive$value[2])
title = ""
if(includeTitle){
title = paste("geoSIMEX Plot of ",variable_name, sep="")
}
# Plot Mean Lambda Values
plot(x$valuesMean$lambda, x$valuesMean[,variable],
xlab = expression((lambda)),
ylab = paste(variable_name, " coefficient", sep=""),
main = title,
xlim = c(0,1),
ylim = c(min(var.vales.all), max(var.vales.all)),
pch  = 16)
if(allSimulations){
points(x$values$lambda, x$values[,variable],
pch=".")
}
points(0,x$coefficients[,variable],
pch=1)
# Prepping Data for Lines
var <- x$valuesMean[,variable]
lambda <- x$valuesMean$lambda
fit <- lm(var ~ lambda + I(lambda^2))
newdat_sim = data.frame(lambda = seq(min(lambda), max(lambda), length.out = 100))
newdat_sim$pred = predict(fit, newdata = newdat_sim)
newdat_extrp = data.frame(lambda = seq(0, min(lambda), length.out = 100))
newdat_extrp$pred = predict(fit, newdata = newdat_extrp)
# Plotting Lines
with(newdat_sim, lines(x = lambda, y = pred))
with(newdat_extrp, lines(x = lambda, y = pred, lty = 2))
# Plot Naive Model
points(x$lambda_naive, coef.naive,
pch="*")
# Plotting Confidence Intervals
lines(x=CI.geoSIMEX$lambda, y=CI.geoSIMEX$value, lty=5)
lines(x=CI.naive$lambda, y=CI.naive$value, lty=1)
}
##### SECTION 1_1: GEOSIMEX SIMULATION FUNCTION, 2 VARS #####
geoSIMEX2_est <- function(model,
geoSIMEXvariable_1,
geoSIMEXvariable_2,
roiData,
aidData_1,
aidData_2,
aid.amount_1,
aid.amount_2,
iterations,
bins,
fitting.method,
roi.area_1,
roi.area_2,
roi.pc1.name,
roi.pc2.name,
roi.pc3.name,
roi.pc4.name,
roi.pc5.name,
roi.pc6.name,
aid.pc1.centroid.name_1,
aid.pc1.centroid.name_2,
aid.precision.code_1,
aid.precision.code_2,
binary,
sim_pc1,
average_lambda,
diagonal,
parallel,
mc.cores){
#average_lambda <- TRUE
##### Creating Variables
# Creating probability variable from area
probAid_area_1 <- as.matrix(roiData[roi.area_1] / sum(roiData[roi.area_1]))
probAid_area_2 <- as.matrix(roiData[roi.area_2] / sum(roiData[roi.area_2]))
# Creating matrix of original precision codes
precision.code.original_1 <- as.matrix(aidData_1[aid.precision.code_1])
precision.code.original_2 <- as.matrix(aidData_2[aid.precision.code_2])
##### Calculating Maximum Lambda Denominator #####
aidData_1[aid.precision.code_1] <- 6
param_set = paramSet(aidData=aidData_1, roiData=roiData, probAidAssume=probAid_area_1, aid.precision.code=aid.precision.code_1, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name_1)
param_set[param_set!=0] <- 1
param_set <- param_set * as.matrix(roiData[roi.area_1])
maxLambda_denom_1 <- sum(colSums(param_set))
aidData_2[aid.precision.code_2] <- 6
param_set = paramSet(aidData=aidData_2, roiData=roiData, probAidAssume=probAid_area_2, aid.precision.code=aid.precision.code_2, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name_2)
param_set[param_set!=0] <- 1
param_set <- param_set * as.matrix(roiData[roi.area_2])
maxLambda_denom_2 <- sum(colSums(param_set))
##### Calculate Naive Lambda #####
aidData_1[aid.precision.code_1] <- precision.code.original_1
param_set = paramSet(aidData=aidData_1, roiData=roiData, probAidAssume=probAid_area_1, aid.precision.code=aid.precision.code_1, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name_1)
lambda_naive_1 <- calcLambda(param_set, maxLambda_denom_1, as.matrix(roiData[roi.area_1]))
aidData_2[aid.precision.code_2] <- precision.code.original_2
param_set = paramSet(aidData=aidData_2, roiData=roiData, probAidAssume=probAid_area_2, aid.precision.code=aid.precision.code_2, roi.pc1.name=roi.pc1.name, roi.pc2.name=roi.pc2.name, roi.pc3.name=roi.pc3.name, roi.pc4.name=roi.pc4.name, roi.pc5.name=roi.pc5.name, roi.pc6.name=roi.pc6.name, aid.pc1.centroid.name=aid.pc1.centroid.name_2)
lambda_naive_2 <- calcLambda(param_set, maxLambda_denom_2, as.matrix(roiData[roi.area_2]))
##### Simulating Data with Additional Error and Putting in One Dataframe #####
#prob.increase.list <- runif(iterations,0,1)
#prob.increase.list_2 <- runif(iterations,0,1)
#prob.increase.list_2 <- prob.increase.list_1
geoSimulateError.results <- mclapply(1:iterations, geoSimulateError2,
aidData_1=aidData_1,
aidData_2=aidData_2,
roiData=roiData,
probAidAssume_1=probAid_area_1,
probAidAssume_2=probAid_area_2,
PC_researcherSees_1=precision.code.original_1,
PC_researcherSees_2=precision.code.original_2,
maxLambda_denom_1=maxLambda_denom_1,
maxLambda_denom_2=maxLambda_denom_2,
roi.area_1=roi.area_1,
roi.area_2=roi.area_2,
aid.precision.code_1=aid.precision.code_1,
aid.precision.code_2=aid.precision.code_2,
roi.pc1.name=roi.pc1.name,
roi.pc2.name=roi.pc2.name,
roi.pc3.name=roi.pc3.name,
roi.pc4.name=roi.pc4.name,
roi.pc5.name=roi.pc5.name,
roi.pc6.name=roi.pc6.name,
aid.pc1.centroid.name_1=aid.pc1.centroid.name_1,
aid.pc1.centroid.name_2=aid.pc1.centroid.name_2,
aid.amount_1=aid.amount_1,
aid.amount_2=aid.amount_2,
model=model,
geoSIMEXvariable_1=geoSIMEXvariable_1,
geoSIMEXvariable_2=geoSIMEXvariable_2,
binary=binary,
diagonal=diagonal,
sim_pc1=sim_pc1,
mc.cores=2)
geoSimulateError.results.df <- matrix(NA, ncol=ncol(geoSimulateError.results[[1]][["model.SIMEX.coefs"]]),nrow=0)
geoSimulateError.results.df <- as.data.frame(geoSimulateError.results.df)
geoSimulateError.results.df.se <- matrix(NA, ncol=ncol(geoSimulateError.results[[1]][["model.SIMEX.se"]]),nrow=0)
geoSimulateError.results.df.se <- as.data.frame(geoSimulateError.results.df.se)
for(i in 1:iterations){
geoSimulateError.results.df <- rbind(geoSimulateError.results.df, geoSimulateError.results[[i]][["model.SIMEX.coefs"]])
geoSimulateError.results.df.se <- rbind(geoSimulateError.results.df.se, geoSimulateError.results[[i]][["model.SIMEX.se"]])
}
if(average_lambda){
avg.lambda <- (geoSimulateError.results.df$lambda_1 + geoSimulateError.results.df$lambda_2)/2
geoSimulateError.results.df$lambda_1 <- avg.lambda
geoSimulateError.results.df$lambda_2  <- avg.lambda
}
# Adding Bin Number into Dataset
bin_1_size <- (max(geoSimulateError.results.df$lambda_1) - min(geoSimulateError.results.df$lambda_1)) / bins
for(b in 1:bins){
geoSimulateError.results.df$bin_1[(geoSimulateError.results.df$lambda_1 >= (min(geoSimulateError.results.df$lambda_1) + bin_1_size*(b-1))) &
(geoSimulateError.results.df$lambda_1 <= (min(geoSimulateError.results.df$lambda_1) + bin_1_size*b))] <- b
}
bin_2_size <- (max(geoSimulateError.results.df$lambda_2) - min(geoSimulateError.results.df$lambda_2)) / bins
for(b in 1:bins){
geoSimulateError.results.df$bin_2[(geoSimulateError.results.df$lambda_2 >= (min(geoSimulateError.results.df$lambda_2) + bin_2_size*(b-1))) &
(geoSimulateError.results.df$lambda_2 <= (min(geoSimulateError.results.df$lambda_2) + bin_2_size*b))] <- b
}
geoSimulateError.results.df$bin_12 <- paste(as.character(geoSimulateError.results.df$bin_1),as.character(geoSimulateError.results.df$bin_2),sep="")
geoSimulateError.results.df$bin_12 <- as.numeric(geoSimulateError.results.df$bin_12)
geoSimulateError.results.df.se$bin_1 <- geoSimulateError.results.df$bin_1
geoSimulateError.results.df.se$bin_2 <- geoSimulateError.results.df$bin_2
geoSimulateError.results.df.se$bin_12 <- geoSimulateError.results.df$bin_12
# Remove NAs
geoSimulateError.results.df <- geoSimulateError.results.df[!is.na(geoSimulateError.results.df$bin_12),]
geoSimulateError.results.df.se <- geoSimulateError.results.df.se[!is.na(geoSimulateError.results.df.se$bin_12),]
# Only look at lambda along diagonal
if(diagonal){
geoSimulateError.results.df <- geoSimulateError.results.df[geoSimulateError.results.df$bin_1 == geoSimulateError.results.df$bin_2,]
geoSimulateError.results.df.se <- geoSimulateError.results.df.se[geoSimulateError.results.df.se$bin_1 == geoSimulateError.results.df.se$bin_2,]
}
# Mean Bin Coefficient
extrapolatedMean.df <- as.data.frame(matrix(NA, nrow=0, ncol=ncol(geoSimulateError.results.df)))
for(b in names(table(geoSimulateError.results.df$bin_12))){
df.temp <- geoSimulateError.results.df[geoSimulateError.results.df$bin_12 == b,]
df.mean.temp <- colMeans(df.temp)
extrapolatedMean.df <- rbind(extrapolatedMean.df, df.mean.temp)
}
names(extrapolatedMean.df) <- names(df.temp)
average_lambda
# Mean Bin Coefficient Extrapolation
extrapolatedMean.df$lambda_1_sq <- extrapolatedMean.df$lambda_1^2
extrapolatedMean.df$lambda_2_sq <- extrapolatedMean.df$lambda_2^2
if(average_lambda){
numVars <- ncol(extrapolatedMean.df) - 7
coef.geoSIMEX <- matrix(NA, nrow=1, ncol=numVars)
for(i in 1:numVars){
coef.geoSIMEX[i] <- summary(lm(as.matrix(extrapolatedMean.df[i]) ~ lambda_1 + lambda_1_sq, data = extrapolatedMean.df))$coefficients[1]
}
coef.geoSIMEX <- as.data.frame(coef.geoSIMEX)
names(coef.geoSIMEX) <- head(names(extrapolatedMean.df), -7)
} else{
numVars <- ncol(extrapolatedMean.df) - 7
coef.geoSIMEX <- matrix(NA, nrow=1, ncol=numVars)
for(i in 1:numVars){
coef.geoSIMEX[i] <- summary(lm(as.matrix(extrapolatedMean.df[i]) ~ lambda_1 + lambda_2 + lambda_1_sq + lambda_2_sq, data = extrapolatedMean.df))$coefficients[1]
}
coef.geoSIMEX <- as.data.frame(coef.geoSIMEX)
names(coef.geoSIMEX) <- head(names(extrapolatedMean.df), -7)
}
##### Bootstrap Standard Error #####
numberBootIter <- nrow(geoSimulateError.results.df)
geoSimulateError.results.df$lambda_1_sq <- geoSimulateError.results.df$lambda_1^2
geoSimulateError.results.df$lambda_2_sq <- geoSimulateError.results.df$lambda_2^2
geoSimulateError.results.df.se$lambda_1_sq <- geoSimulateError.results.df.se$lambda_1^2
geoSimulateError.results.df.se$lambda_2_sq <- geoSimulateError.results.df.se$lambda_2^2
bootIter.list <- mclapply(seq(1:numberBootIter), bootIter2,
geoSimulateError.results.df=geoSimulateError.results.df,
geoSimulateError.results.df.se=geoSimulateError.results.df.se,
average_lambda,
mc.cores=2)
boot.coefs.matrix <- as.data.frame(matrix(NA, nrow=0, ncol=ncol(bootIter.list[[1]]$coefs.geoSIMEX.boot)))
boot.se.matrix <- as.data.frame(matrix(NA, nrow=0, ncol=ncol(bootIter.list[[1]]$se.geoSIMEX.boot)))
for(i in 1:length(bootIter.list)){
boot.coefs.matrix <- rbind(boot.coefs.matrix, bootIter.list[[i]]$coefs.geoSIMEX.boot)
boot.se.matrix <- rbind(boot.se.matrix, bootIter.list[[i]]$se.geoSIMEX.boot)
}
calcSE <- function(i, boot.coefs.matrix, boot.se.matrix){
se <- sqrt(sum((1/length(boot.coefs.matrix[,i]))*(boot.se.matrix[,i]^2 + (boot.coefs.matrix[,i] - mean(boot.coefs.matrix[,i]))^2)))
return(se)
}
se.geoSIMEX <- lapply(1:ncol(boot.coefs.matrix), calcSE, boot.coefs.matrix=boot.coefs.matrix, boot.se.matrix=boot.se.matrix)
se.geoSIMEX <- as.data.frame(se.geoSIMEX)
names(se.geoSIMEX) <- names(boot.coefs.matrix)
##### Standard Error by Parts #####
model.var <- colMeans(boot.se.matrix^2)
calcVar.imprecision <- function(i, boot.coefs.matrix){
var <- sum((1/nrow(boot.coefs.matrix)) * (boot.coefs.matrix[,i] - mean(boot.coefs.matrix[,i]))^2)
return(var)
}
var.imprecision <- lapply(1:ncol(boot.coefs.matrix), calcVar.imprecision, boot.coefs.matrix=boot.coefs.matrix)
var.imprecision <- as.data.frame(var.imprecision)
names(var.imprecision) <- names(boot.coefs.matrix)
#sqrt(model.var + var.imprecision)
#se.geoSIMEX
##### Collecting Results #####
row.names(coef.geoSIMEX) <- "Coefficients"
coef <- t(coef.geoSIMEX)
se <- se.geoSIMEX
coef.se <- cbind(coef,t(se))
df = model$df
# Values so will work with stargazer
# https://github.com/cran/stargazer/blob/master/R/stargazer-internal.R
# NOTE: Fix so will reflect geoSIMEX coefficients and not naive coefficients?
#residuals = model$residuals
residuals <- rep(NA, length(model$residuals))
model.imprecision.variance <- rbind(model.var,var.imprecision)
row.names(model.imprecision.variance) <- c("Model Variance", "Imprecision Variance")
model.imprecision.variance <- as.data.frame(model.imprecision.variance)
lambda_naive <- (lambda_naive_1 + lambda_naive_2) / 2
return(list(coefficients=coef.geoSIMEX,
StdErr=se.geoSIMEX,
coef.se = coef.se,
df = df,
variance.model.imprecision = model.imprecision.variance,
residuals = residuals,
naive.model = model,
lambda_1 = lambda_naive_1,
lambda_2 = lambda_naive_2,
lambda = lambda_naive,
simulations = iterations,
geoSIMEXvariable_1 = geoSIMEXvariable_1,
geoSIMEXvariable_2 = geoSIMEXvariable_2,
values=geoSimulateError.results.df,
values.se=geoSimulateError.results.df.se,
valuesMean=extrapolatedMean.df))
}
# @title Geographic SIMEX
#
# @author AidData
#
# @import parallel
#
# @description
# \code{geoSIMEX} Implementation of the geoSIMEX algorithm for models
plot.geoSIMEX <- function(x, variable, confInt = 95, allSimulations=FALSE, includeTitle=TRUE, name_variable="", ylim="default"){
#name_variable = variable
# NOTE: Can make things like "all simulations", "confidence bands", "% interval"
# all parameters / options.
if(name_variable == ""){
variable_name = variable
} else {
variable_name = name_variable
}
# Calculating 95\% Confidence Bands
t_critical <- qt((1-confInt/100), x$df)
coef.geoSIMEX <- x$coefficients[,variable]
se.geoSIMEX <- x$StdErr[,variable]
CI.geoSIMEX <- as.data.frame(matrix(NA, nrow=2, ncol=2))
names(CI.geoSIMEX) <- c("value", "lambda")
CI.geoSIMEX$lambda <- 0
CI.geoSIMEX$value[1] <- coef.geoSIMEX - t_critical*se.geoSIMEX
CI.geoSIMEX$value[2] <- coef.geoSIMEX + t_critical*se.geoSIMEX
coef.naive <- as.data.frame(t(x$naive.model$coefficients))[,variable]
se.naive <- as.data.frame(summary(x$naive.model)$coefficients)[variable,2]
CI.naive <- as.data.frame(matrix(NA, nrow=2, ncol=2))
names(CI.naive) <- c("value", "lambda")
CI.naive$lambda <- x$lambda_naive
CI.naive$value[1] <- coef.naive - t_critical*se.naive
CI.naive$value[2] <- coef.naive + t_critical*se.naive
# All Variable Values to Define Min / Max ylim of Plot
var.vales.all <- c(x$valuesMean[,variable], x$values[,variable], x$coefficients[,variable], CI.geoSIMEX$value[1], CI.geoSIMEX$value[2], CI.naive$value[1], CI.naive$value[2])
title = ""
if(includeTitle){
title = paste("geoSIMEX Plot of ",variable_name, sep="")
}
# Plot Mean Lambda Values
ylim==c(NA,NA)
if(ylim[1] == "default"){
plot(x$valuesMean$lambda, x$valuesMean[,variable],
xlab = expression((lambda)),
ylab = paste(variable_name, " coefficient", sep=""),
main = title,
xlim = c(0,1),
ylim = c(min(var.vales.all), max(var.vales.all)),
pch  = 16)
} else{
plot(x$valuesMean$lambda, x$valuesMean[,variable],
xlab = expression((lambda)),
ylab = paste(variable_name, " coefficient", sep=""),
main = title,
xlim = c(0,1),
ylim = ylim,
pch  = 16)
}
if(allSimulations){
points(x$values$lambda, x$values[,variable],
pch=".")
}
points(0,x$coefficients[,variable],
pch=1)
# Prepping Data for Lines
var <- x$valuesMean[,variable]
lambda <- x$valuesMean$lambda
fit <- lm(var ~ lambda + I(lambda^2))
newdat_sim = data.frame(lambda = seq(min(lambda), max(lambda), length.out = 100))
newdat_sim$pred = predict(fit, newdata = newdat_sim)
newdat_extrp = data.frame(lambda = seq(0, min(lambda), length.out = 100))
newdat_extrp$pred = predict(fit, newdata = newdat_extrp)
# Plotting Lines
with(newdat_sim, lines(x = lambda, y = pred))
with(newdat_extrp, lines(x = lambda, y = pred, lty = 2))
# Plot Naive Model
points(x$lambda_naive, coef.naive,
pch="*")
# Plotting Confidence Intervals
lines(x=CI.geoSIMEX$lambda, y=CI.geoSIMEX$value, lty=5)
lines(x=CI.naive$lambda, y=CI.naive$value, lty=1)
}
##### SECTION 1_BUFFER: GEOSIMEX WITH BUFFER #####
plot(model.geoSIMEX.expected_aid.area, variable="expected_aid.area", allSimulations=TRUE, ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.population, variable="expected_aid.population", allSimulations=TRUE, ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.NTL, variable="expected_aid.NTL", allSimulations=TRUE, ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.lowPC, variable="expected_aid.lowPC", allSimulations=TRUE, ylim=ylim_common)
pdf(paste("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/paper/Figures/geoSIMEX_plots_scenario_",scenario,".png",sep=""), height=10, width=10)
par(mfrow=c(2,2))
plot(model.geoSIMEX.expected_aid.area, variable="expected_aid.area", ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.population, variable="expected_aid.population", ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.NTL, variable="expected_aid.NTL", ylim=ylim_common)
plot(model.geoSIMEX.expected_aid.lowPC, variable="expected_aid.lowPC", ylim=ylim_common)
dev.off()
