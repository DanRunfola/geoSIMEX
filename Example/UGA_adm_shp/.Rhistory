ItalianSomaliland.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Somalia_ItalianSomaliland_BritishSomaliland.gdb"
Zanzibar.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Zanzibar.gdb"
Mozambique.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Mozambique_PortugueseMozambique.gdb"
SierraLeone.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/SierraLeone_BritishSierraLeone_ALCC.gdb"
Gabon.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Gabon_FrenchGabon.gdb"
Benin.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Benin_FrenchDahomey.gdb"
Ghana_GoldCoast.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Ghana_GoldCoast_BritishTogoland.gdb"
FrenchWestAfrica.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/FrenchWestAfrica.gdb"
goldcoast_britishtogoland_adm2_1949 = readOGR(dsn=Ghana_GoldCoast.gdb,layer="goldcoast_britishtogoland_adm2_1949")
View(goldcoast_britishtogoland_adm2_1949)
View(goldCoast.settler)
goldCoast.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Gold Coast 1948.csv")
goldCoast.settler <- goldCoast.settler[!is.na(goldCoast.settler$euro_pop),]
View(goldCoast.settler)
goldCoast.settler$district <- as.character(goldCoast.settler$district)
goldcoast_britishtogoland_adm2_1949$ADM2_NAME <- as.character(goldcoast_britishtogoland_adm2_1949$ADM2_NAME)
table(table(goldCoast.settler$district)) # checking duplicate names
table(table(goldcoast_britishtogoland_adm2_1949$ADM2_NAME)) # checking duplicate names
goldCoast.settler$district[!(goldCoast.settler$district %in% goldcoast_britishtogoland_adm2_1949$ADM2_NAME)]
goldCoast.merged <- merge(goldcoast_britishtogoland_adm2_1949, goldCoast.settler, by.x="ADM2_NAME", by.y="district", all.x=TRUE)
goldCoast.merged$Colony <- "Gold Coast"
goldCoast.merged$ADM_NAME <- goldCoast.merged$ADM2_NAME
frenchtogo_adm2_1960 = readOGR(dsn=Togo.gdb,layer="togo_adm2_1960")
guineaconkary_adm1_1948 = readOGR(dsn=Guinea.gdb,layer="guineaconakry_adm1_1948")
frenchcameroons_adm2_1947 = readOGR(dsn=Cameroon.gdb,layer="frenchcameroons_adm2_1947")
frenchchad_adm1_1953 = readOGR(dsn=Chad.gbd,layer="frenchchad_adm1_1953")
benin_adm2_1963_2 = readOGR(dsn=Benin.gdb,layer="benin_adm2_1963_2")
frenchcameroons_adm2_1947 = readOGR(dsn=Cameroon.gdb,layer="frenchcameroons_adm2_1947")
guineabissau_adm1_1974 = readOGR(dsn=Guinea.gdb,layer="guineabissau_adm1_1974")
GuineaBissau_PortugueseGuinea.gdb "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/GuineaBissau_PortugueseGuinea.gdb"
GuineaBissau_PortugueseGuinea.gdb "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/GuineaBissau_PortugueseGuinea.gdb"
GuineaBissau_PortugueseGuinea.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/GuineaBissau_PortugueseGuinea.gdb"
guineabissau_adm1_1974 = readOGR(dsn=GuineaBissau_PortugueseGuinea.gdb,layer="guineabissau_adm1_1974")
Madagascar.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Madagascar_FrenchMadagascar.gdb"
madagascar_adm1_1969 = readOGR(dsn=Madagascar.gbd,layer="madagascar_adm1_1969")
subset(ogrDrivers(), grepl("GDB", name))
fc_list = ogrListLayers(Madagascar.gbd)
print(fc_list)
Madagascar.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Madagascar_FrenchMadagascar.gdb"
madagascar_adm1_1969 = readOGR(dsn=Madagascar.gbd,layer="madagascar_adm1_1969")
frenchchad_adm1_1953 = readOGR(dsn=Chad.gbd,layer="frenchchad_adm1_1953")
Chad.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Chad_FrenchTchad.gdb"
frenchchad_adm1_1953 = readOGR(dsn=Chad.gbd,layer="frenchchad_adm1_1953")
fc_list = ogrListLayers(Chad.gbd)
print(fc_list)
chad_adm1_1953 = readOGR(dsn=Chad.gbd,layer="chad_adm1_1953")
subset(ogrDrivers(), grepl("GDB", name))
fc_list = ogrListLayers(Benin.gdb)
print(fc_list)
benin_adm2_1963_2 = readOGR(dsn=Dahomey.gbd,layer="benin_adm2_1963_2")
fc_list = ogrListLayers(Dahomey.gbd)
print(fc_list)
fc_list = ogrListLayers(Benin.gbd)
benin_adm2_1963_2 = readOGR(dsn=Benin.gbd,layer="benin_adm2_1963_2")
Benin.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Benin_FrenchDahomey.gdb"
fc_list = ogrListLayers(Dahomey.gbd)
print(fc_list)
benin_adm2_1963_2 = readOGR(dsn=Dahomey.gbd,layer="benin_adm2_1963_2")
benin_adm2_1963_2 = readOGR(dsn=Dahomey.gbd,layer="benin_adm2_1963")
benin_adm2_1963 = readOGR(dsn=Dahomey.gbd,layer="benin_adm2_1963")
fc_list = ogrListLayers(Cameroon.gdb)
print(fc_list)
View(chad_adm1_1953)
View(tchad.settler)
tchad.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Tchad 1950.csv")
tchad.settler <- tchad.settler[!is.na(tchad.settler$euro_pop),]
View(tchad.settler)
fc_list = ogrListLayers(Chad.gbd)
print(fc_list)
chad_adm2_1953 = readOGR(dsn=Chad.gbd,layer="chad_adm2_1953")
View(chad_adm2_1953)
tchad.settler$District <- as.character(tchad.settler$District)
chad_adm2_1953$District_adm2 <- as.character(chad_adm2_1953$District_adm2)
table(table(tchad.settler$District)) # checking duplicate names
table(table(chad_adm2_1953$District_adm2)) # checking duplicate names
tchad.settler$District[!(tchad.settler$District %in% chad_adm2_1953$District_adm2)]
sort(chad_adm2_1953$District_adm2)
View(tchad.settler)
fc_list = ogrListLayers(Cameroon.gdb)
print(fc_list)
Cameroon.Brits <- "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Cameroon_BritishCameroons.gdb"
fc_list = ogrListLayers(Cameroon.Brits)
print(fc_list)
fc_list = ogrListLayers(Cameroon.gdb)
print(fc_list)
frenchcameroons_adm2_195X = readOGR(dsn=Cameroon.gdb,layer="frenchcameroons_adm2_195X")
View(frenchcameroons_adm2_195X)
View(frenchCameroun.settler)
frenchCameroun.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/French Cameroun 1951.csv")
frenchCameroun.settler <- frenchCameroun.settler[!is.na(frenchCameroun.settler$euro_pop),]
View(frenchCameroun.settler)
frenchCameroun.settler$District <- as.character(frenchCameroun.settler$District)
frenchcameroons_adm2_195X$adm2_NAME <- as.character(frenchcameroons_adm2_195X$adm2_NAME)
table(table(frenchCameroun.settler$District)) # checking duplicate names
table(table(frenchcameroons_adm2_195X$adm2_NAME)) # checking duplicate names
frenchCameroun.settler$District[!(frenchCameroun.settler$District %in% frenchcameroons_adm2_195X$adm2_NAME)]
frenchCameroun.merged <- merge(frenchcameroons_adm2_195X, frenchCameroun.settler, by.x="adm2_NAME", by.y="District", all.x=TRUE)
frenchCameroun.merged$Colony <- "Cameroun"
frenchCameroun.merged$ADM_NAME <- frenchCameroun.merged$adm2_NAME
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/geoSIMEX/R/geoSIMEX_updating.R")
##### Parameters #####
# Define correlation to true??? Focus on parameter testing. But have that as variable?
# Building Case Study Parameters
numberProjects = round(runif(1, 50, 250)) # Number of aid project locations
probAidTrue_gammaShape = runif(1,min=.5,max=10)
countryVersion <- sample(size=1,x=c(1,2,3), prob=c(1/3,1/3,1/3))
trueAidCoef <- 1
equalArea <- sample(size=1,x=c(TRUE,FALSE), prob=c(0,1))
# geoSIMEX Parameters
simErrorP1 <- sample(size=1,x=c(TRUE,FALSE), prob=c(.5,.5))
simErrorIncrease <- sample(size=1,x=c("All","onlyP6","onlyP4"), prob=c(.5,.5,0))
numSIMEXiter <- round(runif(1, 50, 50))
binNum <- sample(size=1, x=c(3,4,5,6,7,8,9,10), prob=c(1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8))
subCounty_gammaShape = runif(1,min=.5,max=10)
numFromBin <- 1
##### Building Country #####
PCpercents <- runif(5)
increase_highPC <- sample(size=1,x=c(TRUE,FALSE), prob=c(.5,.5))
if(increase_highPC){
PCpercents[4] <- PCpercents[4] + runif(1)
PCpercents[5] <- PCpercents[5] + runif(1)
}
PCpercents <- PCpercents / sum(PCpercents)
if(countryVersion == 1){
numSubcounties <- 60
numSubcountyInCounty <- 2
numCountyInDistrict <- 3
numDistrictInRegion <- 5
}
if(countryVersion == 2){
numSubcounties <- 120
numSubcountyInCounty <- 3
numCountyInDistrict <- 2
numDistrictInRegion <- 4
}
if(countryVersion == 3){
numSubcounties <- 120
numSubcountyInCounty <- 2
numCountyInDistrict <- 3
numDistrictInRegion <- 2
}
##### Building Administrative Zones of Country #####
N <- numSubcounties
subcounty <- 1:N
county <- rep(1:(N/numSubcountyInCounty), each=numSubcountyInCounty)
district <- rep(1:(N/(numSubcountyInCounty*numCountyInDistrict)), each=(numSubcountyInCounty*numCountyInDistrict))
region <- rep(1:(N/(numSubcountyInCounty*numCountyInDistrict*numDistrictInRegion)), each=(numSubcountyInCounty*numCountyInDistrict*numDistrictInRegion))
country <- 1
# Area of Subcounties
if(equalArea == TRUE){
subcountyArea <- rep(1,N)
}
if(equalArea == FALSE){
subcountyArea <- rgamma(N,shape=subCounty_gammaShape)
}
##### Probability of Aid Landing in Subcounty #####
probAid_true <- rgamma(N,shape=probAidTrue_gammaShape) / N # Not Equal Split
probAid_equal <- subcountyArea / N # Equal means equal among grid cells. So larger subcounties are more likely to get aid. Keeps as a completely spatial problem.
if(knowProbTrue){
probAid_equal <- probAid_true
}
subcountyData <- as.data.frame(cbind(subcounty,county,district,region,country,probAid_true,subcountyArea))
##### Creating Aid Dataset #####
aidData <- as.data.frame(matrix(NA,nrow=numberProjects,ncol=3))
names(aidData) <- c("aid","trueSubcounty","PC")
#aidData$aid <- runif(numberProjects,1,100000000) # All aid projects have random dollar disbursement
aidData$aid <- 1 # All aid projects have one dollar disbursement
aidData$trueSubcounty <- sample(size=numberProjects,x=c(1:N), prob=probAid_true, replace=TRUE)
##### Creating Subcounty Dataset #####
aidData$PC <- 1
subcountyData$trueAid <- expected_aid_ROI(aidData=aidData,
roiData=subcountyData,
roi.prob.aid=subcountyData$probAid_true,
dollar_set=aidData$aid,
aid.precision.code=aidData$PC,
roi.pc1.name="subcounty",
roi.pc2.name="county",
roi.pc3.name="district",
roi.pc4.name="region",
roi.pc5.name="region",
roi.pc6.name="country",
aid.pc1.centroid.name="trueSubcounty")
subcountyData$wealth <- subcountyData$trueAid * trueAidCoef + rnorm(nrow(subcountyData)) * 0.1
##### Model Without Error #####
model_noError <- lm(wealth ~ trueAid, data=subcountyData)
##### Generating Dataset that Research Would See #####
pCodes <- c(1,2,3,4,6)
PC_researcherSees <- sample(size=numberProjects, x=c(pCodes), prob=PCpercents, replace=TRUE)
aidData$PC <- PC_researcherSees
subcountyData$expectedAid <- expected_aid_ROI(aidData=aidData,
roiData=subcountyData,
roi.prob.aid=subcountyData$probAid_true,
dollar_set=aidData$aid,
aid.precision.code=aidData$PC,
roi.pc1.name="subcounty",
roi.pc2.name="county",
roi.pc3.name="district",
roi.pc4.name="region",
roi.pc5.name="region",
roi.pc6.name="country",
aid.pc1.centroid.name="trueSubcounty")
naive_model <- lm(wealth ~ expectedAid, data=subcountyData)
geoSIMEX_model <- geoSIMEX(model = naive_model,
geoSIMEXvariable = "expectedAid",
roiData = subcountyData,
aidData = aidData,
aid.amount = "aid",
iterations = 500,
bins = binNum,
roi.area = "subcountyArea",
roi.prob.aid = "subcountyArea",
roi.pc1.name="subcounty",
roi.pc2.name="county",
roi.pc3.name="district",
roi.pc4.name="region",
roi.pc5.name="region",
roi.pc6.name="country",
aid.pc1.centroid.name="trueSubcounty",
aid.precision.code=aidData$PC,
binary=FALSE,
sim_pc1=TRUE,
extrapolation="linear")
results.df <- as.data.frame(matrix(NA,ncol=0,nrow=1))
results.df$trueAidCoef <- trueAidCoef
results.df$numberProjects <- numberProjects
results.df$countryVersion <- countryVersion
results.df$equalArea <- equalArea
results.df$simErrorP1 <- simErrorP1
results.df$simErrorIncrease <- simErrorIncrease
results.df$numSIMEXiter <- numSIMEXiter
results.df$binNum <- binNum
results.df$numFromBin <- numFromBin
results.df$lambda <- geoSIMEX_model$lambda
results.df$geoSIMEX.coef <- summary(geoSIMEX_model)$coefficients[2,1]
results.df$geoSIMEX.se <- summary(geoSIMEX_model)$coefficients[2,2]
results.df$naive.coef<- summary(naive_model)$coefficients[2,1]
results.df$naive.se <- summary(naive_model)$coefficients[2,2]
results.df
#summary(geoSIMEX_model)
#plot(geoSIMEX_model, variable = "expectedAid")
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
geoSIMEX_sim(1)
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
geoSIMEX_sim(2)
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
df <- geoSIMEX_sim()
df.temp <- geoSIMEX_sim()
df.a <- rbind(df,df.temp)
df.a
source("~/Desktop/AidData/MeasureErrorsInEx/geoSIMEX/initialstate_code_results/parameter_sims/geoSIMEX_parameter_sims.R")
df <- geoSIMEX_sim()
for(i in 1:2){
df <- rbind(df,geoSIMEX_sim())
}
benin_adm2_1963 = readOGR(dsn=Dahomey.gbd,layer="benin_adm2_1963")
View(benin_adm2_1963)
Uganda.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Uganda_BritishUganda.gdb"
britishuganda_adm1_1962 = readOGR(dsn=Uganda.gdb,layer="britishuganda_adm1_1962")
View(britishuganda_adm1_1962)
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948")
uganda.settler <- uganda.settler[!is.na(uganda.settler$euro_pop),]
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948.csv")
uganda.settler <- uganda.settler[!is.na(uganda.settler$euro_pop),]
uganda.settler
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948.csv")
uganda.settler
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948.csv")
uganda.settler <- uganda.settler[!is.na(uganda.settler$Euro..Population),]
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948.csv")
uganda.settler <- uganda.settler[!is.na(uganda.settler$Euro..Population),]
VieW(frenchCameroun.settler)
View(frenchCameroun.settler)
uganda.settler$District <- as.character(uganda.settler$District)
britishuganda_adm1_1962$NAME_1 <- as.character(britishuganda_adm1_1962$NAME_1)
table(table(uganda.settler$District)) # checking duplicate names
table(table(britishuganda_adm1_1962$NAME_1)) # checking duplicate names
uganda.settler$District[!(uganda.settler$District %in% britishuganda_adm1_1962$NAME_1)]
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948.csv")
uganda.settler <- uganda.settler[!is.na(uganda.settler$Euro..Population),]
uganda.settler
uganda.settler <- uganda.settler[!is.na(uganda.settler$euro_prop_euro_total),]
uganda.settler
uganda.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Uganda 1948.csv")
uganda.settler <- uganda.settler[!is.na(uganda.settler$euro_prop_euro_total),]
uganda.settler$District <- as.character(uganda.settler$District)
britishuganda_adm1_1962$NAME_1 <- as.character(britishuganda_adm1_1962$NAME_1)
table(table(uganda.settler$District)) # checking duplicate names
table(table(britishuganda_adm1_1962$NAME_1)) # checking duplicate names
uganda.settler$District[!(uganda.settler$District %in% britishuganda_adm1_1962$NAME_1)]
names(britishuganda_adm1_1962$NAME_1)
sort(britishuganda_adm1_1962$NAME_1)
britishuganda_adm1_1962$NAME_1
britishuganda_adm1_1962$NAME_1[!(britishuganda_adm1_1962$NAME_1 %in% uganda.settler$District)]
uganda.settler$District <- as.character(uganda.settler$District)
britishuganda_adm1_1962$NAME_1 <- as.character(britishuganda_adm1_1962$NAME_1)
table(table(uganda.settler$District)) # checking duplicate names
table(table(britishuganda_adm1_1962$NAME_1)) # checking duplicate names
uganda.settler$District[!(uganda.settler$District %in% britishuganda_adm1_1962$NAME_1)]
britishuganda_adm1_1962$NAME_1[!(britishuganda_adm1_1962$NAME_1 %in% uganda.settler$District)]
uganda.merged <- merge(britishuganda_adm1_1962, uganda.settler, by.x="NAME_1", by.y="District", all.x=TRUE)
uganda.merged$Colony <- "Uganda"
uganda.merged$ADM_NAME <- uganda.merged$NAME_1
Gambia.gbd <- "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Gambia_BritishGambia.gdb"
gambia_adm1_1964 = readOGR(dsn=Gambia.gbd,layer="gambia_adm1_1964")
gambia.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/The Gambia 1945.csv")
gambia.settler
gambia.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/The Gambia 1945.csv")
gambia.settler <- uganda.settler[!is.na(uganda.settler$euro_prop_euro_total),]
View(gambia.settler)
View(gambia_adm1_1964)
gambia.settler$District <- as.character(gambia.settler$District)
gambia_adm1_1964$NAME_adm1 <- as.character(gambia_adm1_1964$NAME_adm1)
table(table(gambia.settler$District)) # checking duplicate names
table(table(gambia_adm1_1964$NAME_adm1)) # checking duplicate names
gambia.settler$District[!(gambia.settler$District %in% gambia_adm1_1964$NAME_adm1)]
table(table(gambia.settler$District)) # checking duplicate names
gambia.settler$District
gambia.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/The Gambia 1945.csv")
gambia.settler <- gambia.settler[!is.na(gambia.settler$euro_prop_euro_total),]
gambia.settler
gambia.settler$District <- as.character(gambia.settler$District)
gambia_adm1_1964$NAME_adm1 <- as.character(gambia_adm1_1964$NAME_adm1)
View(gambia.settler)
gambia.settler$Province <- as.character(gambia.settler$Province)
gambia_adm1_1964$NAME_adm1 <- as.character(gambia_adm1_1964$NAME_adm1)
table(table(gambia.settler$Province)) # checking duplicate names
table(table(gambia_adm1_1964$NAME_adm1)) # checking duplicate names
gambia.settler$Province[!(gambia.settler$Province %in% gambia_adm1_1964$NAME_adm1)]
gambia.merged <- merge(gambia_adm1_1964, gambia.settler, by.x="NAME_adm1", by.y="Province", all.x=TRUE)
gambia.merged$Colony <- "The Gambia"
gambia.merged$ADM_NAME <- gambia.merged$NAME_adm1
chad_adm2_1953 = readOGR(dsn=Chad.gbd,layer="chad_adm2_1953")
tchad.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Tchad 1950.csv")
tchad.settler <- tchad.settler[!is.na(tchad.settler$euro_pop),]
tchad.settler$District <- as.character(tchad.settler$District)
chad_adm2_1953$District_adm2 <- as.character(chad_adm2_1953$District_adm2)
table(table(tchad.settler$District)) # checking duplicate names
table(table(chad_adm2_1953$District_adm2)) # checking duplicate names
tchad.settler$District[!(tchad.settler$District %in% chad_adm2_1953$District_adm2)]
tchad.settler$District[tchad.settler$District == ""] <- ""
tchad.merged <- merge(chad_adm2_1953, tchad.settler, by.x="District_adm2", by.y="District", all.x=TRUE)
tchad.merged$Colony <- "Chad"
tchad.merged$ADM_NAME <- tchad.merged$District_adm2
madagascar.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Madagascar 1946.csv")
madagascar.settler
madagascar.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Madagascar 1946.csv")
madagascar.settler <- madagascar.settler[!is.na(madagascar.settler$euro_prop_total),]
madagascar.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Madagascar 1946.csv")
madagascar.settler <- madagascar.settler[!is.na(madagascar.settler$euro_prop_total),]
View(madagascar.settler)
madagascar_adm1_1969 = readOGR(dsn=Madagascar.gbd,layer="madagascar_adm1_1969")
View(gambia_adm1_1964)
View(madagascar_adm1_1969)
madagascar.settler
madagascar.settler$District <- as.character(madagascar.settler$District)
madagascar_adm1_1969$NAME_1 <- as.character(madagascar_adm1_1969$NAME_1)
table(table(madagascar.settler$District)) # checking duplicate names
table(table(madagascar_adm1_1969$NAME_1)) # checking duplicate names
madagascar.settler$District[!(madagascar.settler$District %in% madagascar_adm1_1969$NAME_1)]
madagascar.merged <- merge(madagascar_adm1_1969, madagascar.settler, by.x="NAME_1", by.y="District", all.x=TRUE)
madagascar.merged$Colony <- "Madagascar"
madagascar.merged$ADM_NAME <- madagascar.merged$NAME_1
View(madagascar.merged)
togo.settler$District <- as.character(togo.settler$District)
frenchtogo_adm2_1960$NAME_2 <- as.character(frenchtogo_adm2_1960$NAME_2)
togo.settler$District <- as.character(togo.settler$District)
portuguesemozambique_adm3_1963 = readOGR(dsn=Mozambique.gdb,layer="portuguesemozambique_adm3_1963")
mozambique.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Mozambique 1945.csv")
mozambique.settler
mozambique.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Mozambique 1945.csv")
mozambique.settler <- mozambique.settler[!is.na(mozambique.settler$euro_prop_total),]
View(madagascar.settler)
View(mozambique.settler)
View(mozambique.settler)
View(portuguesemozambique_adm3_1963)
mozambique.settler$County <- as.character(mozambique.settler$County)
portuguesemozambique_adm3_1963$NAME_3 <- as.character(portuguesemozambique_adm3_1963$NAME_3)
table(table(mozambique.settler$County)) # checking duplicate names
table(table(portuguesemozambique_adm3_1963$NAME_3)) # checking duplicate names
mozambique.settler$County[!(mozambique.settler$County %in% portuguesemozambique_adm3_1963$NAME_3)]
mozambique.merged <- merge(portuguesemozambique_adm3_1963, mozambique.settler, by.x="NAME_3", by.y="County", all.x=TRUE)
mozambique.settler$County <- as.character(mozambique.settler$County)
portuguesemozambique_adm3_1963$NAME_3 <- as.character(portuguesemozambique_adm3_1963$NAME_3)
table(table(mozambique.settler$County)) # checking duplicate names
table(table(portuguesemozambique_adm3_1963$NAME_3)) # checking duplicate names
mozambique.settler$County[!(mozambique.settler$County %in% portuguesemozambique_adm3_1963$NAME_3)]
mozambique.merged <- merge(portuguesemozambique_adm3_1963, mozambique.settler, by.x="NAME_3", by.y="County", all.x=TRUE)
mozambique.merged$Colony <- "Mozambique"
mozambique.merged$ADM_NAME <- mozambique.merged$NAME_3
Sudan.gdb <- "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Sudan_AngloEgyptianSudan_ALCC.gdb"
sudan_adm1_1956 = readOGR(dsn=Sudan.gdb,layer="sudan_adm1_1956")
sudan_adm1_1956 = readOGR(dsn=Sudan.gdb,layer="sudan_adm1_1956")
sudan.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Sudan 1955_56.csv")
sudan.settler <- sudan.settler[!is.na(sudan.settler$euro_prop_total),]
sudan.settler
View(sudan_adm1_1956)
sudan.settler$Province <- as.character(sudan.settler$Province)
sudan_adm1_1956$NAME_1 <- as.character(sudan_adm1_1956$NAME_1)
table(table(sudan.settler$Province)) # checking duplicate names
table(table(sudan_adm1_1956$NAME_1)) # checking duplicate names
sudan.settler$Province[!(sudan.settler$Province %in% sudan_adm1_1956$NAME_1)]
sudan.merged <- merge(sudan_adm1_1956, sudan.settler, by.x="NAME_1", by.y="Province", all.x=TRUE)
sudan.merged$Colony <- "Sudan"
sudan.merged$ADM_NAME <- sudan.merged$NAME_1
View(benin_adm2_1963)
View(dahomey.settler)
dahomey.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Dahomey 1955_56.csv")
dahomey.settler <- dahomey.settler[!is.na(dahomey.settler$euro_pop),]
View(dahomey.settler)
dahomey.settler$District <- as.character(dahomey.settler$District)
benin_adm2_1963$ADM2_NAMES_1963 <- as.character(benin_adm2_1963$ADM2_NAMES_1963)
table(table(dahomey.settler$District)) # checking duplicate names
table(table(benin_adm2_1963$ADM2_NAMES_1963)) # checking duplicate names
dahomey.settler$District[!(dahomey.settler$District %in% benin_adm2_1963$ADM2_NAMES_1963)]
dahomey.merged <- merge(benin_adm2_1963, dahomey.settler, by.x="ADM2_NAMES_1963", by.y="District", all.x=TRUE)
dahomey.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Dahomey 1955_56.csv")
dahomey.settler
dahomey.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Dahomey 1955_56.csv")
dahomey.settler <- dahomey.settler[!is.na(dahomey.settler$euro_prop_total),]
dahomey.settler
dahomey.settler$District <- as.character(dahomey.settler$District)
benin_adm2_1963$ADM2_NAMES_1963 <- as.character(benin_adm2_1963$ADM2_NAMES_1963)
benin_adm2_1963
nrow(benin_adm2_1963)
# Merging Settler Data to Shapefiles
# CAD
library(rgdal)
library(raster)
library(plyr)
library(plotKML)
library(xlsx)
library(tmap)
library(doBy)
library(rgeos)
##### * Import Map Layers * #####
# The input file geodatabase
Guinea.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/GuineaConakry_FrenchGuinea.gdb"
CoteDivoire.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/CoteDivoire_FrenchCoteDivoire.gdb"
Cameroon.gdb =    "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Cameroon_FrenchCameroons_BritishCameroons.gdb"
Kenya.gdb =    "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Kenya_BritishKenya_ALCC.gdb"
Chad.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Chad_FrenchTchad.gdb"
CentralAfricanRepublic.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/CentralAfricanRepublic_OubanguiChari.gdb"
Dahomey.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Benin_FrenchDahomey.gdb"
Ethiopia.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Ethiopia_ItalianEthiopia.gdb"
Mali.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Mali_FrenchSudan.gdb"
Madagascar.gbd = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Madagascar_FrenchMadagascar.gdb"
Ghana.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Ghana_GoldCoast_BritishTogoland.gdb"
Senegal.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Senegal_FrenchSenegal.gdb"
BurundiRwanda.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Burundi_Rwanda_BelgianRuandaUrundi.gdb"
BritishTanganyika.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/BritishTanganyika.gdb"
Togo.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Togo_FrenchTogoland.gdb"
Uganda.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Uganda_BritishUganda.gdb"
NorthernRhodesia.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Zambia_NorthernRhodesia.gdb"
SouthernRhodesia.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Zimbabwe_SouthernRhodesia.gdb"
Nigeria.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Nigeria_BritishNigeria_ALCC.gdb"
Niger.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Niger_FrenchNiger.gdb"
Sudan.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Sudan.gdb"
Congo.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/CongoDR_BelgianCongo.gdb"
Gambia.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Gambia_BritishGambia.gdb"
Angola.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Angola_PortugueseAngola_PortugueseCongo.gdb"
Malawi.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Malawi_Nyasaland.gdb"
Liberia.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Liberia.gdb"
ItalianSomaliland.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Somalia_ItalianSomaliland_BritishSomaliland.gdb"
Zanzibar.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Zanzibar.gdb"
Mozambique.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Mozambique_PortugueseMozambique.gdb"
SierraLeone.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/SierraLeone_BritishSierraLeone_ALCC.gdb"
Gabon.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Gabon_FrenchGabon.gdb"
Ghana_GoldCoast.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Ghana_GoldCoast_BritishTogoland.gdb"
FrenchWestAfrica.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/FrenchWestAfrica.gdb"
GuineaBissau_PortugueseGuinea.gdb = "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/GuineaBissau_PortugueseGuinea.gdb"
CameroonBrits.gdb <- "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Cameroon_BritishCameroons.gdb"
Gambia.gbd <- "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Gambia_BritishGambia.gdb"
Sudan.gdb <- "/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Primary Commodities Production/Shapefiles/Sudan_AngloEgyptianSudan_ALCC.gdb"
subset(ogrDrivers(), grepl("GDB", name))
fc_list = ogrListLayers(Cameroon.gdb)
print(fc_list)
frenchtogo_adm2_1960 = readOGR(dsn=Togo.gdb,layer="togo_adm2_1960")
togo.settler <- read.csv("/Users/robmarty/Dropbox/Primary Commodities and Powersharing/Data/Settler data/CSV Files/Togo 1951.csv")
togo.settler <- togo.settler[!is.na(togo.settler$euro_pop),]
togo.settler
togo.settler$District <- as.character(togo.settler$District)
frenchtogo_adm2_1960$NAME_2 <- as.character(frenchtogo_adm2_1960$NAME_2)
table(table(togo.settler$District)) # checking duplicate names
table(table(frenchtogo_adm2_1960$NAME_2)) # checking duplicate names
togo.settler$District[!(togo.settler$District %in% frenchtogo_adm2_1960$NAME_2)]
gabon.merged <- merge(frenchtogo_adm2_1960, togo.settler, by.x="NAME_2", by.y="District", all.x=TRUE)
gabon.merged$Colony <- "Gabon"
gabon.merged$ADM_NAME <- gabon.merged$NAME_2
frenchtogo_adm2_1960$NAME_2
sort(frenchtogo_adm2_1960$NAME_2)
togo.settler$District <- as.character(togo.settler$District)
frenchtogo_adm2_1960$NAME_2 <- as.character(frenchtogo_adm2_1960$NAME_2)
table(table(togo.settler$District)) # checking duplicate names
table(table(frenchtogo_adm2_1960$NAME_2)) # checking duplicate names
togo.settler$District[!(togo.settler$District %in% frenchtogo_adm2_1960$NAME_2)]
togo.settler$District[togo.settler$District == "T\x99ne"] <- "Tône"
togo.settler$District[togo.settler$District == "Golfe (incl Lom\x8e)"] <- "Golfe (incl Lomé)"
togo.settler$District[!(togo.settler$District %in% frenchtogo_adm2_1960$NAME_2)]
togo.settler$District <- as.character(togo.settler$District)
frenchtogo_adm2_1960$NAME_2 <- as.character(frenchtogo_adm2_1960$NAME_2)
table(table(togo.settler$District)) # checking duplicate names
table(table(frenchtogo_adm2_1960$NAME_2)) # checking duplicate names
togo.settler$District[!(togo.settler$District %in% frenchtogo_adm2_1960$NAME_2)]
togo.settler$District[togo.settler$District == "T\x99ne"] <- "Tône"
togo.settler$District[togo.settler$District == "Golfe (incl Lom\x8e)"] <- "Golfe (incl Lomé)"
togo.merged <- merge(frenchtogo_adm2_1960, togo.settler, by.x="NAME_2", by.y="District", all.x=TRUE)
togo.merged$Colony <- "Togo"
togo.merged$ADM_NAME <- togo.merged$NAME_2
View(togo.merged)
